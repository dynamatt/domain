/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Domain.Client.SwaggerDateConverter;

namespace Domain.Model
{
    /// <summary>
    /// Contains details about a business sales info
    /// </summary>
    [DataContract]
        public partial class ListingAdminV2SaleInfo :  IEquatable<ListingAdminV2SaleInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingAdminV2SaleInfo" /> class.
        /// </summary>
        /// <param name="annualSales">Annual sales amount for the business (required).</param>
        /// <param name="annualProfit">Annual profit amount for the business (required).</param>
        /// <param name="stockValue">Stock value of the business (required).</param>
        public ListingAdminV2SaleInfo(double? annualSales = default(double?), double? annualProfit = default(double?), double? stockValue = default(double?))
        {
            // to ensure "annualSales" is required (not null)
            if (annualSales == null)
            {
                throw new InvalidDataException("annualSales is a required property for ListingAdminV2SaleInfo and cannot be null");
            }
            else
            {
                this.AnnualSales = annualSales;
            }
            // to ensure "annualProfit" is required (not null)
            if (annualProfit == null)
            {
                throw new InvalidDataException("annualProfit is a required property for ListingAdminV2SaleInfo and cannot be null");
            }
            else
            {
                this.AnnualProfit = annualProfit;
            }
            // to ensure "stockValue" is required (not null)
            if (stockValue == null)
            {
                throw new InvalidDataException("stockValue is a required property for ListingAdminV2SaleInfo and cannot be null");
            }
            else
            {
                this.StockValue = stockValue;
            }
        }
        
        /// <summary>
        /// Annual sales amount for the business
        /// </summary>
        /// <value>Annual sales amount for the business</value>
        [DataMember(Name="annualSales", EmitDefaultValue=false)]
        public double? AnnualSales { get; set; }

        /// <summary>
        /// Annual profit amount for the business
        /// </summary>
        /// <value>Annual profit amount for the business</value>
        [DataMember(Name="annualProfit", EmitDefaultValue=false)]
        public double? AnnualProfit { get; set; }

        /// <summary>
        /// Stock value of the business
        /// </summary>
        /// <value>Stock value of the business</value>
        [DataMember(Name="stockValue", EmitDefaultValue=false)]
        public double? StockValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingAdminV2SaleInfo {\n");
            sb.Append("  AnnualSales: ").Append(AnnualSales).Append("\n");
            sb.Append("  AnnualProfit: ").Append(AnnualProfit).Append("\n");
            sb.Append("  StockValue: ").Append(StockValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingAdminV2SaleInfo);
        }

        /// <summary>
        /// Returns true if ListingAdminV2SaleInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingAdminV2SaleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingAdminV2SaleInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnnualSales == input.AnnualSales ||
                    (this.AnnualSales != null &&
                    this.AnnualSales.Equals(input.AnnualSales))
                ) && 
                (
                    this.AnnualProfit == input.AnnualProfit ||
                    (this.AnnualProfit != null &&
                    this.AnnualProfit.Equals(input.AnnualProfit))
                ) && 
                (
                    this.StockValue == input.StockValue ||
                    (this.StockValue != null &&
                    this.StockValue.Equals(input.StockValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnnualSales != null)
                    hashCode = hashCode * 59 + this.AnnualSales.GetHashCode();
                if (this.AnnualProfit != null)
                    hashCode = hashCode * 59 + this.AnnualProfit.GetHashCode();
                if (this.StockValue != null)
                    hashCode = hashCode * 59 + this.StockValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
