/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Domain.Client.SwaggerDateConverter;

namespace Domain.Model
{
    /// <summary>
    /// Off market details base
    /// </summary>
    [DataContract]
        public partial class ListingAdminV2OffMarketDetailsBase :  IEquatable<ListingAdminV2OffMarketDetailsBase>, IValidatableObject
    {
        /// <summary>
        /// Off Market Action
        /// </summary>
        /// <value>Off Market Action</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OffMarketActionEnum
        {
            /// <summary>
            /// Enum WithDrawn for value: withDrawn
            /// </summary>
            [EnumMember(Value = "withDrawn")]
            WithDrawn = 1,
            /// <summary>
            /// Enum Sold for value: sold
            /// </summary>
            [EnumMember(Value = "sold")]
            Sold = 2,
            /// <summary>
            /// Enum Leased for value: leased
            /// </summary>
            [EnumMember(Value = "leased")]
            Leased = 3        }
        /// <summary>
        /// Off Market Action
        /// </summary>
        /// <value>Off Market Action</value>
        [DataMember(Name="offMarketAction", EmitDefaultValue=false)]
        public OffMarketActionEnum OffMarketAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingAdminV2OffMarketDetailsBase" /> class.
        /// </summary>
        /// <param name="offMarketAction">Off Market Action (required).</param>
        /// <param name="actionDate">The date property was sold, leased or withdrawn (required).</param>
        /// <param name="soldDetails">soldDetails.</param>
        /// <param name="leasedDetails">leasedDetails.</param>
        /// <param name="comment">Extra details for off market action.</param>
        public ListingAdminV2OffMarketDetailsBase(OffMarketActionEnum offMarketAction = default(OffMarketActionEnum), DateTime? actionDate = default(DateTime?), ListingAdminV2SoldDetails soldDetails = default(ListingAdminV2SoldDetails), ListingAdminV2LeasedDetails leasedDetails = default(ListingAdminV2LeasedDetails), string comment = default(string))
        {
            // to ensure "offMarketAction" is required (not null)
            if (offMarketAction == null)
            {
                throw new InvalidDataException("offMarketAction is a required property for ListingAdminV2OffMarketDetailsBase and cannot be null");
            }
            else
            {
                this.OffMarketAction = offMarketAction;
            }
            // to ensure "actionDate" is required (not null)
            if (actionDate == null)
            {
                throw new InvalidDataException("actionDate is a required property for ListingAdminV2OffMarketDetailsBase and cannot be null");
            }
            else
            {
                this.ActionDate = actionDate;
            }
            this.SoldDetails = soldDetails;
            this.LeasedDetails = leasedDetails;
            this.Comment = comment;
        }
        

        /// <summary>
        /// The date property was sold, leased or withdrawn
        /// </summary>
        /// <value>The date property was sold, leased or withdrawn</value>
        [DataMember(Name="actionDate", EmitDefaultValue=false)]
        public DateTime? ActionDate { get; set; }

        /// <summary>
        /// Gets or Sets SoldDetails
        /// </summary>
        [DataMember(Name="soldDetails", EmitDefaultValue=false)]
        public ListingAdminV2SoldDetails SoldDetails { get; set; }

        /// <summary>
        /// Gets or Sets LeasedDetails
        /// </summary>
        [DataMember(Name="leasedDetails", EmitDefaultValue=false)]
        public ListingAdminV2LeasedDetails LeasedDetails { get; set; }

        /// <summary>
        /// Extra details for off market action
        /// </summary>
        /// <value>Extra details for off market action</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingAdminV2OffMarketDetailsBase {\n");
            sb.Append("  OffMarketAction: ").Append(OffMarketAction).Append("\n");
            sb.Append("  ActionDate: ").Append(ActionDate).Append("\n");
            sb.Append("  SoldDetails: ").Append(SoldDetails).Append("\n");
            sb.Append("  LeasedDetails: ").Append(LeasedDetails).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingAdminV2OffMarketDetailsBase);
        }

        /// <summary>
        /// Returns true if ListingAdminV2OffMarketDetailsBase instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingAdminV2OffMarketDetailsBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingAdminV2OffMarketDetailsBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OffMarketAction == input.OffMarketAction ||
                    (this.OffMarketAction != null &&
                    this.OffMarketAction.Equals(input.OffMarketAction))
                ) && 
                (
                    this.ActionDate == input.ActionDate ||
                    (this.ActionDate != null &&
                    this.ActionDate.Equals(input.ActionDate))
                ) && 
                (
                    this.SoldDetails == input.SoldDetails ||
                    (this.SoldDetails != null &&
                    this.SoldDetails.Equals(input.SoldDetails))
                ) && 
                (
                    this.LeasedDetails == input.LeasedDetails ||
                    (this.LeasedDetails != null &&
                    this.LeasedDetails.Equals(input.LeasedDetails))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OffMarketAction != null)
                    hashCode = hashCode * 59 + this.OffMarketAction.GetHashCode();
                if (this.ActionDate != null)
                    hashCode = hashCode * 59 + this.ActionDate.GetHashCode();
                if (this.SoldDetails != null)
                    hashCode = hashCode * 59 + this.SoldDetails.GetHashCode();
                if (this.LeasedDetails != null)
                    hashCode = hashCode * 59 + this.LeasedDetails.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
