/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Domain.Client.SwaggerDateConverter;

namespace Domain.Model
{
    /// <summary>
    /// Parking Details
    /// </summary>
    [DataContract]
        public partial class ListingAdminV2ParkingDetails :  IEquatable<ListingAdminV2ParkingDetails>, IValidatableObject
    {
        /// <summary>
        /// Can have the value \&quot;OnSite\&quot;, \&quot;OnStreet\&quot;, \&quot;NoParking\&quot;. Default: \&quot;NoParking\&quot;
        /// </summary>
        /// <value>Can have the value \&quot;OnSite\&quot;, \&quot;OnStreet\&quot;, \&quot;NoParking\&quot;. Default: \&quot;NoParking\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ParkingTypeEnum
        {
            /// <summary>
            /// Enum OnSite for value: onSite
            /// </summary>
            [EnumMember(Value = "onSite")]
            OnSite = 1,
            /// <summary>
            /// Enum OnStreet for value: onStreet
            /// </summary>
            [EnumMember(Value = "onStreet")]
            OnStreet = 2,
            /// <summary>
            /// Enum NoParking for value: noParking
            /// </summary>
            [EnumMember(Value = "noParking")]
            NoParking = 3,
            /// <summary>
            /// Enum Garage for value: garage
            /// </summary>
            [EnumMember(Value = "garage")]
            Garage = 4,
            /// <summary>
            /// Enum Carport for value: carport
            /// </summary>
            [EnumMember(Value = "carport")]
            Carport = 5,
            /// <summary>
            /// Enum Outdoor for value: outdoor
            /// </summary>
            [EnumMember(Value = "outdoor")]
            Outdoor = 6        }
        /// <summary>
        /// Can have the value \&quot;OnSite\&quot;, \&quot;OnStreet\&quot;, \&quot;NoParking\&quot;. Default: \&quot;NoParking\&quot;
        /// </summary>
        /// <value>Can have the value \&quot;OnSite\&quot;, \&quot;OnStreet\&quot;, \&quot;NoParking\&quot;. Default: \&quot;NoParking\&quot;</value>
        [DataMember(Name="parkingType", EmitDefaultValue=false)]
        public ParkingTypeEnum ParkingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingAdminV2ParkingDetails" /> class.
        /// </summary>
        /// <param name="parkingType">Can have the value \&quot;OnSite\&quot;, \&quot;OnStreet\&quot;, \&quot;NoParking\&quot;. Default: \&quot;NoParking\&quot; (required).</param>
        /// <param name="numberOfSpaces">Number of parking spaces on site (required).</param>
        public ListingAdminV2ParkingDetails(ParkingTypeEnum parkingType = default(ParkingTypeEnum), int? numberOfSpaces = default(int?))
        {
            // to ensure "parkingType" is required (not null)
            if (parkingType == null)
            {
                throw new InvalidDataException("parkingType is a required property for ListingAdminV2ParkingDetails and cannot be null");
            }
            else
            {
                this.ParkingType = parkingType;
            }
            // to ensure "numberOfSpaces" is required (not null)
            if (numberOfSpaces == null)
            {
                throw new InvalidDataException("numberOfSpaces is a required property for ListingAdminV2ParkingDetails and cannot be null");
            }
            else
            {
                this.NumberOfSpaces = numberOfSpaces;
            }
        }
        

        /// <summary>
        /// Number of parking spaces on site
        /// </summary>
        /// <value>Number of parking spaces on site</value>
        [DataMember(Name="numberOfSpaces", EmitDefaultValue=false)]
        public int? NumberOfSpaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingAdminV2ParkingDetails {\n");
            sb.Append("  ParkingType: ").Append(ParkingType).Append("\n");
            sb.Append("  NumberOfSpaces: ").Append(NumberOfSpaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingAdminV2ParkingDetails);
        }

        /// <summary>
        /// Returns true if ListingAdminV2ParkingDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingAdminV2ParkingDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingAdminV2ParkingDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParkingType == input.ParkingType ||
                    (this.ParkingType != null &&
                    this.ParkingType.Equals(input.ParkingType))
                ) && 
                (
                    this.NumberOfSpaces == input.NumberOfSpaces ||
                    (this.NumberOfSpaces != null &&
                    this.NumberOfSpaces.Equals(input.NumberOfSpaces))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParkingType != null)
                    hashCode = hashCode * 59 + this.ParkingType.GetHashCode();
                if (this.NumberOfSpaces != null)
                    hashCode = hashCode * 59 + this.NumberOfSpaces.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
