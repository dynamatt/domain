/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Domain.Client.SwaggerDateConverter;

namespace Domain.Model
{
    /// <summary>
    /// Inspection details
    /// </summary>
    [DataContract]
        public partial class ListingAdminV2InspectionDetails :  IEquatable<ListingAdminV2InspectionDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingAdminV2InspectionDetails" /> class.
        /// </summary>
        /// <param name="inspectionDescription">Free text field for inspections.</param>
        /// <param name="inspections">Inspection times of the listing.</param>
        public ListingAdminV2InspectionDetails(string inspectionDescription = default(string), List<ListingAdminV2Inspection> inspections = default(List<ListingAdminV2Inspection>))
        {
            this.InspectionDescription = inspectionDescription;
            this.Inspections = inspections;
        }
        
        /// <summary>
        /// Free text field for inspections
        /// </summary>
        /// <value>Free text field for inspections</value>
        [DataMember(Name="inspectionDescription", EmitDefaultValue=false)]
        public string InspectionDescription { get; set; }

        /// <summary>
        /// Inspection times of the listing
        /// </summary>
        /// <value>Inspection times of the listing</value>
        [DataMember(Name="inspections", EmitDefaultValue=false)]
        public List<ListingAdminV2Inspection> Inspections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingAdminV2InspectionDetails {\n");
            sb.Append("  InspectionDescription: ").Append(InspectionDescription).Append("\n");
            sb.Append("  Inspections: ").Append(Inspections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingAdminV2InspectionDetails);
        }

        /// <summary>
        /// Returns true if ListingAdminV2InspectionDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingAdminV2InspectionDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingAdminV2InspectionDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InspectionDescription == input.InspectionDescription ||
                    (this.InspectionDescription != null &&
                    this.InspectionDescription.Equals(input.InspectionDescription))
                ) && 
                (
                    this.Inspections == input.Inspections ||
                    this.Inspections != null &&
                    input.Inspections != null &&
                    this.Inspections.SequenceEqual(input.Inspections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InspectionDescription != null)
                    hashCode = hashCode * 59 + this.InspectionDescription.GetHashCode();
                if (this.Inspections != null)
                    hashCode = hashCode * 59 + this.Inspections.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
