/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Domain.Client.SwaggerDateConverter;

namespace Domain.Model
{
    /// <summary>
    /// Supplementary metadata
    /// </summary>
    [DataContract]
        public partial class ListingAdminV2SupplementaryMetadata :  IEquatable<ListingAdminV2SupplementaryMetadata>, IValidatableObject
    {
        /// <summary>
        /// Measurement unit
        /// </summary>
        /// <value>Measurement unit</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MeasurementUnitEnum
        {
            /// <summary>
            /// Enum SquareMetres for value: squareMetres
            /// </summary>
            [EnumMember(Value = "squareMetres")]
            SquareMetres = 1,
            /// <summary>
            /// Enum Hectares for value: hectares
            /// </summary>
            [EnumMember(Value = "hectares")]
            Hectares = 2,
            /// <summary>
            /// Enum Millimetres for value: millimetres
            /// </summary>
            [EnumMember(Value = "millimetres")]
            Millimetres = 3,
            /// <summary>
            /// Enum Dse for value: dse
            /// </summary>
            [EnumMember(Value = "dse")]
            Dse = 4        }
        /// <summary>
        /// Measurement unit
        /// </summary>
        /// <value>Measurement unit</value>
        [DataMember(Name="measurementUnit", EmitDefaultValue=false)]
        public MeasurementUnitEnum? MeasurementUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingAdminV2SupplementaryMetadata" /> class.
        /// </summary>
        /// <param name="name">Name (required).</param>
        /// <param name="description">Description.</param>
        /// <param name="measurement">Measurement.</param>
        /// <param name="measurementUnit">Measurement unit.</param>
        public ListingAdminV2SupplementaryMetadata(string name = default(string), string description = default(string), double? measurement = default(double?), MeasurementUnitEnum? measurementUnit = default(MeasurementUnitEnum?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ListingAdminV2SupplementaryMetadata and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Description = description;
            this.Measurement = measurement;
            this.MeasurementUnit = measurementUnit;
        }
        
        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Measurement
        /// </summary>
        /// <value>Measurement</value>
        [DataMember(Name="measurement", EmitDefaultValue=false)]
        public double? Measurement { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingAdminV2SupplementaryMetadata {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Measurement: ").Append(Measurement).Append("\n");
            sb.Append("  MeasurementUnit: ").Append(MeasurementUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingAdminV2SupplementaryMetadata);
        }

        /// <summary>
        /// Returns true if ListingAdminV2SupplementaryMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingAdminV2SupplementaryMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingAdminV2SupplementaryMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Measurement == input.Measurement ||
                    (this.Measurement != null &&
                    this.Measurement.Equals(input.Measurement))
                ) && 
                (
                    this.MeasurementUnit == input.MeasurementUnit ||
                    (this.MeasurementUnit != null &&
                    this.MeasurementUnit.Equals(input.MeasurementUnit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Measurement != null)
                    hashCode = hashCode * 59 + this.Measurement.GetHashCode();
                if (this.MeasurementUnit != null)
                    hashCode = hashCode * 59 + this.MeasurementUnit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
