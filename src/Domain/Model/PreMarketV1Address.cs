/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Domain.Client.SwaggerDateConverter;

namespace Domain.Model
{
    /// <summary>
    /// PreMarketV1Address
    /// </summary>
    [DataContract]
        public partial class PreMarketV1Address :  IEquatable<PreMarketV1Address>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreMarketV1Address" /> class.
        /// </summary>
        /// <param name="streetNumber">Street (and possibly unit) number component of an address. E.g. 23, 1a, 11/1. (required).</param>
        /// <param name="street">Street name, e.g. Punt Road. (required).</param>
        /// <param name="suburb">suburb (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="postcode">postcode (required).</param>
        public PreMarketV1Address(string streetNumber = default(string), string street = default(string), string suburb = default(string), PreMarketV1State state = default(PreMarketV1State), string postcode = default(string))
        {
            // to ensure "streetNumber" is required (not null)
            if (streetNumber == null)
            {
                throw new InvalidDataException("streetNumber is a required property for PreMarketV1Address and cannot be null");
            }
            else
            {
                this.StreetNumber = streetNumber;
            }
            // to ensure "street" is required (not null)
            if (street == null)
            {
                throw new InvalidDataException("street is a required property for PreMarketV1Address and cannot be null");
            }
            else
            {
                this.Street = street;
            }
            // to ensure "suburb" is required (not null)
            if (suburb == null)
            {
                throw new InvalidDataException("suburb is a required property for PreMarketV1Address and cannot be null");
            }
            else
            {
                this.Suburb = suburb;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for PreMarketV1Address and cannot be null");
            }
            else
            {
                this.State = state;
            }
            // to ensure "postcode" is required (not null)
            if (postcode == null)
            {
                throw new InvalidDataException("postcode is a required property for PreMarketV1Address and cannot be null");
            }
            else
            {
                this.Postcode = postcode;
            }
        }
        
        /// <summary>
        /// Street (and possibly unit) number component of an address. E.g. 23, 1a, 11/1.
        /// </summary>
        /// <value>Street (and possibly unit) number component of an address. E.g. 23, 1a, 11/1.</value>
        [DataMember(Name="streetNumber", EmitDefaultValue=false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Street name, e.g. Punt Road.
        /// </summary>
        /// <value>Street name, e.g. Punt Road.</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name="suburb", EmitDefaultValue=false)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public PreMarketV1State State { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreMarketV1Address {\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreMarketV1Address);
        }

        /// <summary>
        /// Returns true if PreMarketV1Address instances are equal
        /// </summary>
        /// <param name="input">Instance of PreMarketV1Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreMarketV1Address input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
