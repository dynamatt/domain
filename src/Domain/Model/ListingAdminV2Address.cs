/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Domain.Client.SwaggerDateConverter;

namespace Domain.Model
{
    /// <summary>
    /// Address structure for property
    /// </summary>
    [DataContract]
        public partial class ListingAdminV2Address :  IEquatable<ListingAdminV2Address>, IValidatableObject
    {
        /// <summary>
        /// What granularity to display the properties location at
        /// </summary>
        /// <value>What granularity to display the properties location at</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DisplayOptionEnum
        {
            /// <summary>
            /// Enum Unspecified for value: unspecified
            /// </summary>
            [EnumMember(Value = "unspecified")]
            Unspecified = 1,
            /// <summary>
            /// Enum FullAddress for value: fullAddress
            /// </summary>
            [EnumMember(Value = "fullAddress")]
            FullAddress = 2,
            /// <summary>
            /// Enum StreetAndSuburb for value: streetAndSuburb
            /// </summary>
            [EnumMember(Value = "streetAndSuburb")]
            StreetAndSuburb = 3,
            /// <summary>
            /// Enum SuburbOnly for value: suburbOnly
            /// </summary>
            [EnumMember(Value = "suburbOnly")]
            SuburbOnly = 4,
            /// <summary>
            /// Enum RegionOnly for value: regionOnly
            /// </summary>
            [EnumMember(Value = "regionOnly")]
            RegionOnly = 5,
            /// <summary>
            /// Enum AreaOnly for value: areaOnly
            /// </summary>
            [EnumMember(Value = "areaOnly")]
            AreaOnly = 6,
            /// <summary>
            /// Enum StateOnly for value: stateOnly
            /// </summary>
            [EnumMember(Value = "stateOnly")]
            StateOnly = 7        }
        /// <summary>
        /// What granularity to display the properties location at
        /// </summary>
        /// <value>What granularity to display the properties location at</value>
        [DataMember(Name="displayOption", EmitDefaultValue=false)]
        public DisplayOptionEnum? DisplayOption { get; set; }
        /// <summary>
        /// State
        /// </summary>
        /// <value>State</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StateEnum
        {
            /// <summary>
            /// Enum Nsw for value: nsw
            /// </summary>
            [EnumMember(Value = "nsw")]
            Nsw = 1,
            /// <summary>
            /// Enum Vic for value: vic
            /// </summary>
            [EnumMember(Value = "vic")]
            Vic = 2,
            /// <summary>
            /// Enum Act for value: act
            /// </summary>
            [EnumMember(Value = "act")]
            Act = 3,
            /// <summary>
            /// Enum Sa for value: sa
            /// </summary>
            [EnumMember(Value = "sa")]
            Sa = 4,
            /// <summary>
            /// Enum Wa for value: wa
            /// </summary>
            [EnumMember(Value = "wa")]
            Wa = 5,
            /// <summary>
            /// Enum Tas for value: tas
            /// </summary>
            [EnumMember(Value = "tas")]
            Tas = 6,
            /// <summary>
            /// Enum Qld for value: qld
            /// </summary>
            [EnumMember(Value = "qld")]
            Qld = 7,
            /// <summary>
            /// Enum Nt for value: nt
            /// </summary>
            [EnumMember(Value = "nt")]
            Nt = 8        }
        /// <summary>
        /// State
        /// </summary>
        /// <value>State</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingAdminV2Address" /> class.
        /// </summary>
        /// <param name="unitNumber">Unit number for apartments, maximum 30 characters.</param>
        /// <param name="street">Street name, maximum 100 characters (required).</param>
        /// <param name="displayOption">What granularity to display the properties location at.</param>
        /// <param name="suggestedGeoLocation">suggestedGeoLocation.</param>
        /// <param name="streetNumber">Street number, maximum 20 characters.</param>
        /// <param name="suburb">Suburb name , maximum 50 characters (required).</param>
        /// <param name="postcode">Postcode (required).</param>
        /// <param name="state">State (required).</param>
        public ListingAdminV2Address(string unitNumber = default(string), string street = default(string), DisplayOptionEnum? displayOption = default(DisplayOptionEnum?), ListingAdminV2GeoLocation suggestedGeoLocation = default(ListingAdminV2GeoLocation), string streetNumber = default(string), string suburb = default(string), string postcode = default(string), StateEnum state = default(StateEnum))
        {
            // to ensure "street" is required (not null)
            if (street == null)
            {
                throw new InvalidDataException("street is a required property for ListingAdminV2Address and cannot be null");
            }
            else
            {
                this.Street = street;
            }
            // to ensure "suburb" is required (not null)
            if (suburb == null)
            {
                throw new InvalidDataException("suburb is a required property for ListingAdminV2Address and cannot be null");
            }
            else
            {
                this.Suburb = suburb;
            }
            // to ensure "postcode" is required (not null)
            if (postcode == null)
            {
                throw new InvalidDataException("postcode is a required property for ListingAdminV2Address and cannot be null");
            }
            else
            {
                this.Postcode = postcode;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for ListingAdminV2Address and cannot be null");
            }
            else
            {
                this.State = state;
            }
            this.UnitNumber = unitNumber;
            this.DisplayOption = displayOption;
            this.SuggestedGeoLocation = suggestedGeoLocation;
            this.StreetNumber = streetNumber;
        }
        
        /// <summary>
        /// Unit number for apartments, maximum 30 characters
        /// </summary>
        /// <value>Unit number for apartments, maximum 30 characters</value>
        [DataMember(Name="unitNumber", EmitDefaultValue=false)]
        public string UnitNumber { get; set; }

        /// <summary>
        /// Street name, maximum 100 characters
        /// </summary>
        /// <value>Street name, maximum 100 characters</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }


        /// <summary>
        /// Gets or Sets SuggestedGeoLocation
        /// </summary>
        [DataMember(Name="suggestedGeoLocation", EmitDefaultValue=false)]
        public ListingAdminV2GeoLocation SuggestedGeoLocation { get; set; }

        /// <summary>
        /// Street number, maximum 20 characters
        /// </summary>
        /// <value>Street number, maximum 20 characters</value>
        [DataMember(Name="streetNumber", EmitDefaultValue=false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Suburb name , maximum 50 characters
        /// </summary>
        /// <value>Suburb name , maximum 50 characters</value>
        [DataMember(Name="suburb", EmitDefaultValue=false)]
        public string Suburb { get; set; }

        /// <summary>
        /// Postcode
        /// </summary>
        /// <value>Postcode</value>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingAdminV2Address {\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  DisplayOption: ").Append(DisplayOption).Append("\n");
            sb.Append("  SuggestedGeoLocation: ").Append(SuggestedGeoLocation).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingAdminV2Address);
        }

        /// <summary>
        /// Returns true if ListingAdminV2Address instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingAdminV2Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingAdminV2Address input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UnitNumber == input.UnitNumber ||
                    (this.UnitNumber != null &&
                    this.UnitNumber.Equals(input.UnitNumber))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.DisplayOption == input.DisplayOption ||
                    (this.DisplayOption != null &&
                    this.DisplayOption.Equals(input.DisplayOption))
                ) && 
                (
                    this.SuggestedGeoLocation == input.SuggestedGeoLocation ||
                    (this.SuggestedGeoLocation != null &&
                    this.SuggestedGeoLocation.Equals(input.SuggestedGeoLocation))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnitNumber != null)
                    hashCode = hashCode * 59 + this.UnitNumber.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.DisplayOption != null)
                    hashCode = hashCode * 59 + this.DisplayOption.GetHashCode();
                if (this.SuggestedGeoLocation != null)
                    hashCode = hashCode * 59 + this.SuggestedGeoLocation.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
