/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Domain.Client.SwaggerDateConverter;

namespace Domain.Model
{
    /// <summary>
    /// School
    /// </summary>
    [DataContract]
        public partial class School :  IEquatable<School>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="School" /> class.
        /// </summary>
        /// <param name="profile">profile.</param>
        public School(SchoolProfile profile = default(SchoolProfile))
        {
            this.Profile = profile;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets possible values include: &#x27;Catholic&#x27;, &#x27;Government&#x27;,  &#x27;Independent&#x27;
        /// </summary>
        /// <value>Gets possible values include: &#x27;Catholic&#x27;, &#x27;Government&#x27;,  &#x27;Independent&#x27;</value>
        [DataMember(Name="schoolSector", EmitDefaultValue=false)]
        public string SchoolSector { get; private set; }

        /// <summary>
        /// Gets possible values include: &#x27;Combined&#x27;, &#x27;Primary&#x27;, &#x27;Secondary&#x27;,  &#x27;Special&#x27;
        /// </summary>
        /// <value>Gets possible values include: &#x27;Combined&#x27;, &#x27;Primary&#x27;, &#x27;Secondary&#x27;,  &#x27;Special&#x27;</value>
        [DataMember(Name="schoolType", EmitDefaultValue=false)]
        public string SchoolType { get; private set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name="suburb", EmitDefaultValue=false)]
        public string Suburb { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; private set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string Postcode { get; private set; }

        /// <summary>
        /// Gets or Sets Centroid
        /// </summary>
        [DataMember(Name="centroid", EmitDefaultValue=false)]
        public string Centroid { get; private set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public SchoolProfile Profile { get; set; }

        /// <summary>
        /// Gets or Sets DomainId
        /// </summary>
        [DataMember(Name="domainId", EmitDefaultValue=false)]
        public int? DomainId { get; private set; }

        /// <summary>
        /// Gets possible values include: &#x27;Boys&#x27;, &#x27;Girls&#x27;, &#x27;CoEd&#x27;
        /// </summary>
        /// <value>Gets possible values include: &#x27;Boys&#x27;, &#x27;Girls&#x27;, &#x27;CoEd&#x27;</value>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public string Gender { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class School {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SchoolSector: ").Append(SchoolSector).Append("\n");
            sb.Append("  SchoolType: ").Append(SchoolType).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  Centroid: ").Append(Centroid).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as School);
        }

        /// <summary>
        /// Returns true if School instances are equal
        /// </summary>
        /// <param name="input">Instance of School to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(School input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SchoolSector == input.SchoolSector ||
                    (this.SchoolSector != null &&
                    this.SchoolSector.Equals(input.SchoolSector))
                ) && 
                (
                    this.SchoolType == input.SchoolType ||
                    (this.SchoolType != null &&
                    this.SchoolType.Equals(input.SchoolType))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.Centroid == input.Centroid ||
                    (this.Centroid != null &&
                    this.Centroid.Equals(input.Centroid))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.DomainId == input.DomainId ||
                    (this.DomainId != null &&
                    this.DomainId.Equals(input.DomainId))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SchoolSector != null)
                    hashCode = hashCode * 59 + this.SchoolSector.GetHashCode();
                if (this.SchoolType != null)
                    hashCode = hashCode * 59 + this.SchoolType.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.Centroid != null)
                    hashCode = hashCode * 59 + this.Centroid.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.DomainId != null)
                    hashCode = hashCode * 59 + this.DomainId.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
