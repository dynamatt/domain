/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Domain.Client.SwaggerDateConverter;

namespace Domain.Model
{
    /// <summary>
    /// Leased Details
    /// </summary>
    [DataContract]
        public partial class ListingAdminV2LeasedDetails :  IEquatable<ListingAdminV2LeasedDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingAdminV2LeasedDetails" /> class.
        /// </summary>
        /// <param name="leasedPrice">Optional. The weekly rental price..</param>
        /// <param name="leasedDuration">The duration of the lease in weeks..</param>
        public ListingAdminV2LeasedDetails(int? leasedPrice = default(int?), int? leasedDuration = default(int?))
        {
            this.LeasedPrice = leasedPrice;
            this.LeasedDuration = leasedDuration;
        }
        
        /// <summary>
        /// Optional. The weekly rental price.
        /// </summary>
        /// <value>Optional. The weekly rental price.</value>
        [DataMember(Name="leasedPrice", EmitDefaultValue=false)]
        public int? LeasedPrice { get; set; }

        /// <summary>
        /// The duration of the lease in weeks.
        /// </summary>
        /// <value>The duration of the lease in weeks.</value>
        [DataMember(Name="leasedDuration", EmitDefaultValue=false)]
        public int? LeasedDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingAdminV2LeasedDetails {\n");
            sb.Append("  LeasedPrice: ").Append(LeasedPrice).Append("\n");
            sb.Append("  LeasedDuration: ").Append(LeasedDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingAdminV2LeasedDetails);
        }

        /// <summary>
        /// Returns true if ListingAdminV2LeasedDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingAdminV2LeasedDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingAdminV2LeasedDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LeasedPrice == input.LeasedPrice ||
                    (this.LeasedPrice != null &&
                    this.LeasedPrice.Equals(input.LeasedPrice))
                ) && 
                (
                    this.LeasedDuration == input.LeasedDuration ||
                    (this.LeasedDuration != null &&
                    this.LeasedDuration.Equals(input.LeasedDuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeasedPrice != null)
                    hashCode = hashCode * 59 + this.LeasedPrice.GetHashCode();
                if (this.LeasedDuration != null)
                    hashCode = hashCode * 59 + this.LeasedDuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
