/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Domain.Client.SwaggerDateConverter;

namespace Domain.Model
{
    /// <summary>
    /// Pre-portal listing request.
    /// </summary>
    [DataContract]
        public partial class PreMarketV1ListingRequest :  IEquatable<PreMarketV1ListingRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreMarketV1ListingRequest" /> class.
        /// </summary>
        /// <param name="listingStatus">listingStatus (required).</param>
        /// <param name="address">address (required).</param>
        /// <param name="domainAgencyId">The Domain agency ID. Must match an existing Domain agency ID. (required).</param>
        /// <param name="listingProvider">A string identifying the source of the listing.</param>
        /// <param name="providerAdId">External Advertisement Id of up to 50 characters will be stored.  This value is correlated with actual Domain listing when it is created, and it should be unique for the listing provider.   This value is case-insensitive (meaning AAAA will update aaaa)..</param>
        /// <param name="contacts">contacts.</param>
        /// <param name="bedrooms">Number of bedrooms divisible by 0.5. (required).</param>
        /// <param name="bathrooms">Number of bathrooms divisible by 0.5. (required).</param>
        /// <param name="carspaces">Number of car spaces divisible by 0.5. (required).</param>
        /// <param name="summary">Headline of the advertisement. Any HTML will be stripped out..</param>
        /// <param name="description">Description of the property.  Allow up to 6000 characters in length. The following HTML elements are permitted: &#x60;&#x60;&#x60;&lt;br /&gt;, &lt;p&gt;&lt;/p&gt;, &amp;nbsp;&#x60;&#x60;&#x60; . HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade.</param>
        /// <param name="authorityExecutedDate">The date on which the authority contract was executed.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z. (required).</param>
        /// <param name="reservePrice">Vendor reserve price..</param>
        /// <param name="estimatedSalePrice">estimatedSalePrice (required).</param>
        /// <param name="propertyTypes">The property types (e.g. house, apartment/unit/flat, etc.). (required).</param>
        /// <param name="authorityType">authorityType (required).</param>
        /// <param name="exclusivePeriodDays">The time (in days) that the agent has exclusive authority to sell the property..</param>
        /// <param name="exclusiveContinuingPeriodDays">The time (in days) that exclusive authority has been extended..</param>
        /// <param name="exclusivePeriodStartDate">Start date of the exclusivity period.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z..</param>
        /// <param name="actionDate">The date that this property was listed, sold or withdrawn. It is required if listing status is marked to be \&quot;sold, withdrawn, or listed\&quot;.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.   Only the date part will be saved, time part will be discarded. (required).</param>
        /// <param name="statementOfInformation">statementOfInformation.</param>
        /// <param name="images">images.</param>
        /// <param name="metadata">Optional listing metadata..</param>
        public PreMarketV1ListingRequest(PreMarketV1ListingStatus listingStatus = default(PreMarketV1ListingStatus), PreMarketV1Address address = default(PreMarketV1Address), int? domainAgencyId = default(int?), string listingProvider = default(string), string providerAdId = default(string), List<PreMarketV1Contact> contacts = default(List<PreMarketV1Contact>), float? bedrooms = default(float?), float? bathrooms = default(float?), float? carspaces = default(float?), string summary = default(string), string description = default(string), DateTime? authorityExecutedDate = default(DateTime?), double? reservePrice = default(double?), PreMarketV1Price estimatedSalePrice = default(PreMarketV1Price), List<PreMarketV1PropertyType> propertyTypes = default(List<PreMarketV1PropertyType>), PreMarketV1AuthorityType authorityType = default(PreMarketV1AuthorityType), int? exclusivePeriodDays = default(int?), int? exclusiveContinuingPeriodDays = default(int?), DateTime? exclusivePeriodStartDate = default(DateTime?), DateTime? actionDate = default(DateTime?), PreMarketV1StatementOfInformation statementOfInformation = default(PreMarketV1StatementOfInformation), List<PreMarketV1PropertyMedia> images = default(List<PreMarketV1PropertyMedia>), Dictionary<string, string> metadata = default(Dictionary<string, string>))
        {
            // to ensure "listingStatus" is required (not null)
            if (listingStatus == null)
            {
                throw new InvalidDataException("listingStatus is a required property for PreMarketV1ListingRequest and cannot be null");
            }
            else
            {
                this.ListingStatus = listingStatus;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for PreMarketV1ListingRequest and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            // to ensure "domainAgencyId" is required (not null)
            if (domainAgencyId == null)
            {
                throw new InvalidDataException("domainAgencyId is a required property for PreMarketV1ListingRequest and cannot be null");
            }
            else
            {
                this.DomainAgencyId = domainAgencyId;
            }
            // to ensure "bedrooms" is required (not null)
            if (bedrooms == null)
            {
                throw new InvalidDataException("bedrooms is a required property for PreMarketV1ListingRequest and cannot be null");
            }
            else
            {
                this.Bedrooms = bedrooms;
            }
            // to ensure "bathrooms" is required (not null)
            if (bathrooms == null)
            {
                throw new InvalidDataException("bathrooms is a required property for PreMarketV1ListingRequest and cannot be null");
            }
            else
            {
                this.Bathrooms = bathrooms;
            }
            // to ensure "carspaces" is required (not null)
            if (carspaces == null)
            {
                throw new InvalidDataException("carspaces is a required property for PreMarketV1ListingRequest and cannot be null");
            }
            else
            {
                this.Carspaces = carspaces;
            }
            // to ensure "authorityExecutedDate" is required (not null)
            if (authorityExecutedDate == null)
            {
                throw new InvalidDataException("authorityExecutedDate is a required property for PreMarketV1ListingRequest and cannot be null");
            }
            else
            {
                this.AuthorityExecutedDate = authorityExecutedDate;
            }
            // to ensure "estimatedSalePrice" is required (not null)
            if (estimatedSalePrice == null)
            {
                throw new InvalidDataException("estimatedSalePrice is a required property for PreMarketV1ListingRequest and cannot be null");
            }
            else
            {
                this.EstimatedSalePrice = estimatedSalePrice;
            }
            // to ensure "propertyTypes" is required (not null)
            if (propertyTypes == null)
            {
                throw new InvalidDataException("propertyTypes is a required property for PreMarketV1ListingRequest and cannot be null");
            }
            else
            {
                this.PropertyTypes = propertyTypes;
            }
            // to ensure "authorityType" is required (not null)
            if (authorityType == null)
            {
                throw new InvalidDataException("authorityType is a required property for PreMarketV1ListingRequest and cannot be null");
            }
            else
            {
                this.AuthorityType = authorityType;
            }
            // to ensure "actionDate" is required (not null)
            if (actionDate == null)
            {
                throw new InvalidDataException("actionDate is a required property for PreMarketV1ListingRequest and cannot be null");
            }
            else
            {
                this.ActionDate = actionDate;
            }
            this.ListingProvider = listingProvider;
            this.ProviderAdId = providerAdId;
            this.Contacts = contacts;
            this.Summary = summary;
            this.Description = description;
            this.ReservePrice = reservePrice;
            this.ExclusivePeriodDays = exclusivePeriodDays;
            this.ExclusiveContinuingPeriodDays = exclusiveContinuingPeriodDays;
            this.ExclusivePeriodStartDate = exclusivePeriodStartDate;
            this.StatementOfInformation = statementOfInformation;
            this.Images = images;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Gets or Sets ListingStatus
        /// </summary>
        [DataMember(Name="listingStatus", EmitDefaultValue=false)]
        public PreMarketV1ListingStatus ListingStatus { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public PreMarketV1Address Address { get; set; }

        /// <summary>
        /// The Domain agency ID. Must match an existing Domain agency ID.
        /// </summary>
        /// <value>The Domain agency ID. Must match an existing Domain agency ID.</value>
        [DataMember(Name="domainAgencyId", EmitDefaultValue=false)]
        public int? DomainAgencyId { get; set; }

        /// <summary>
        /// A string identifying the source of the listing
        /// </summary>
        /// <value>A string identifying the source of the listing</value>
        [DataMember(Name="listingProvider", EmitDefaultValue=false)]
        public string ListingProvider { get; set; }

        /// <summary>
        /// External Advertisement Id of up to 50 characters will be stored.  This value is correlated with actual Domain listing when it is created, and it should be unique for the listing provider.   This value is case-insensitive (meaning AAAA will update aaaa).
        /// </summary>
        /// <value>External Advertisement Id of up to 50 characters will be stored.  This value is correlated with actual Domain listing when it is created, and it should be unique for the listing provider.   This value is case-insensitive (meaning AAAA will update aaaa).</value>
        [DataMember(Name="providerAdId", EmitDefaultValue=false)]
        public string ProviderAdId { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<PreMarketV1Contact> Contacts { get; set; }

        /// <summary>
        /// Number of bedrooms divisible by 0.5.
        /// </summary>
        /// <value>Number of bedrooms divisible by 0.5.</value>
        [DataMember(Name="bedrooms", EmitDefaultValue=false)]
        public float? Bedrooms { get; set; }

        /// <summary>
        /// Number of bathrooms divisible by 0.5.
        /// </summary>
        /// <value>Number of bathrooms divisible by 0.5.</value>
        [DataMember(Name="bathrooms", EmitDefaultValue=false)]
        public float? Bathrooms { get; set; }

        /// <summary>
        /// Number of car spaces divisible by 0.5.
        /// </summary>
        /// <value>Number of car spaces divisible by 0.5.</value>
        [DataMember(Name="carspaces", EmitDefaultValue=false)]
        public float? Carspaces { get; set; }

        /// <summary>
        /// Headline of the advertisement. Any HTML will be stripped out.
        /// </summary>
        /// <value>Headline of the advertisement. Any HTML will be stripped out.</value>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public string Summary { get; set; }

        /// <summary>
        /// Description of the property.  Allow up to 6000 characters in length. The following HTML elements are permitted: &#x60;&#x60;&#x60;&lt;br /&gt;, &lt;p&gt;&lt;/p&gt;, &amp;nbsp;&#x60;&#x60;&#x60; . HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade
        /// </summary>
        /// <value>Description of the property.  Allow up to 6000 characters in length. The following HTML elements are permitted: &#x60;&#x60;&#x60;&lt;br /&gt;, &lt;p&gt;&lt;/p&gt;, &amp;nbsp;&#x60;&#x60;&#x60; . HTML must be well-formed.  Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The date on which the authority contract was executed.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
        /// </summary>
        /// <value>The date on which the authority contract was executed.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.</value>
        [DataMember(Name="authorityExecutedDate", EmitDefaultValue=false)]
        public DateTime? AuthorityExecutedDate { get; set; }

        /// <summary>
        /// Vendor reserve price.
        /// </summary>
        /// <value>Vendor reserve price.</value>
        [DataMember(Name="reservePrice", EmitDefaultValue=false)]
        public double? ReservePrice { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedSalePrice
        /// </summary>
        [DataMember(Name="estimatedSalePrice", EmitDefaultValue=false)]
        public PreMarketV1Price EstimatedSalePrice { get; set; }

        /// <summary>
        /// The property types (e.g. house, apartment/unit/flat, etc.).
        /// </summary>
        /// <value>The property types (e.g. house, apartment/unit/flat, etc.).</value>
        [DataMember(Name="propertyTypes", EmitDefaultValue=false)]
        public List<PreMarketV1PropertyType> PropertyTypes { get; set; }

        /// <summary>
        /// Gets or Sets AuthorityType
        /// </summary>
        [DataMember(Name="authorityType", EmitDefaultValue=false)]
        public PreMarketV1AuthorityType AuthorityType { get; set; }

        /// <summary>
        /// The time (in days) that the agent has exclusive authority to sell the property.
        /// </summary>
        /// <value>The time (in days) that the agent has exclusive authority to sell the property.</value>
        [DataMember(Name="exclusivePeriodDays", EmitDefaultValue=false)]
        public int? ExclusivePeriodDays { get; set; }

        /// <summary>
        /// The time (in days) that exclusive authority has been extended.
        /// </summary>
        /// <value>The time (in days) that exclusive authority has been extended.</value>
        [DataMember(Name="exclusiveContinuingPeriodDays", EmitDefaultValue=false)]
        public int? ExclusiveContinuingPeriodDays { get; set; }

        /// <summary>
        /// Start date of the exclusivity period.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.
        /// </summary>
        /// <value>Start date of the exclusivity period.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.</value>
        [DataMember(Name="exclusivePeriodStartDate", EmitDefaultValue=false)]
        public DateTime? ExclusivePeriodStartDate { get; set; }

        /// <summary>
        /// The date that this property was listed, sold or withdrawn. It is required if listing status is marked to be \&quot;sold, withdrawn, or listed\&quot;.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.   Only the date part will be saved, time part will be discarded.
        /// </summary>
        /// <value>The date that this property was listed, sold or withdrawn. It is required if listing status is marked to be \&quot;sold, withdrawn, or listed\&quot;.  The date must comply with the ISO 8601 and be in the UTC format, e.g. 2009-06-15T13:45:30.0000000Z.   Only the date part will be saved, time part will be discarded.</value>
        [DataMember(Name="actionDate", EmitDefaultValue=false)]
        public DateTime? ActionDate { get; set; }

        /// <summary>
        /// Gets or Sets StatementOfInformation
        /// </summary>
        [DataMember(Name="statementOfInformation", EmitDefaultValue=false)]
        public PreMarketV1StatementOfInformation StatementOfInformation { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<PreMarketV1PropertyMedia> Images { get; set; }

        /// <summary>
        /// Optional listing metadata.
        /// </summary>
        /// <value>Optional listing metadata.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreMarketV1ListingRequest {\n");
            sb.Append("  ListingStatus: ").Append(ListingStatus).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  DomainAgencyId: ").Append(DomainAgencyId).Append("\n");
            sb.Append("  ListingProvider: ").Append(ListingProvider).Append("\n");
            sb.Append("  ProviderAdId: ").Append(ProviderAdId).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Bedrooms: ").Append(Bedrooms).Append("\n");
            sb.Append("  Bathrooms: ").Append(Bathrooms).Append("\n");
            sb.Append("  Carspaces: ").Append(Carspaces).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AuthorityExecutedDate: ").Append(AuthorityExecutedDate).Append("\n");
            sb.Append("  ReservePrice: ").Append(ReservePrice).Append("\n");
            sb.Append("  EstimatedSalePrice: ").Append(EstimatedSalePrice).Append("\n");
            sb.Append("  PropertyTypes: ").Append(PropertyTypes).Append("\n");
            sb.Append("  AuthorityType: ").Append(AuthorityType).Append("\n");
            sb.Append("  ExclusivePeriodDays: ").Append(ExclusivePeriodDays).Append("\n");
            sb.Append("  ExclusiveContinuingPeriodDays: ").Append(ExclusiveContinuingPeriodDays).Append("\n");
            sb.Append("  ExclusivePeriodStartDate: ").Append(ExclusivePeriodStartDate).Append("\n");
            sb.Append("  ActionDate: ").Append(ActionDate).Append("\n");
            sb.Append("  StatementOfInformation: ").Append(StatementOfInformation).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreMarketV1ListingRequest);
        }

        /// <summary>
        /// Returns true if PreMarketV1ListingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PreMarketV1ListingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreMarketV1ListingRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ListingStatus == input.ListingStatus ||
                    (this.ListingStatus != null &&
                    this.ListingStatus.Equals(input.ListingStatus))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.DomainAgencyId == input.DomainAgencyId ||
                    (this.DomainAgencyId != null &&
                    this.DomainAgencyId.Equals(input.DomainAgencyId))
                ) && 
                (
                    this.ListingProvider == input.ListingProvider ||
                    (this.ListingProvider != null &&
                    this.ListingProvider.Equals(input.ListingProvider))
                ) && 
                (
                    this.ProviderAdId == input.ProviderAdId ||
                    (this.ProviderAdId != null &&
                    this.ProviderAdId.Equals(input.ProviderAdId))
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    input.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && 
                (
                    this.Bedrooms == input.Bedrooms ||
                    (this.Bedrooms != null &&
                    this.Bedrooms.Equals(input.Bedrooms))
                ) && 
                (
                    this.Bathrooms == input.Bathrooms ||
                    (this.Bathrooms != null &&
                    this.Bathrooms.Equals(input.Bathrooms))
                ) && 
                (
                    this.Carspaces == input.Carspaces ||
                    (this.Carspaces != null &&
                    this.Carspaces.Equals(input.Carspaces))
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.AuthorityExecutedDate == input.AuthorityExecutedDate ||
                    (this.AuthorityExecutedDate != null &&
                    this.AuthorityExecutedDate.Equals(input.AuthorityExecutedDate))
                ) && 
                (
                    this.ReservePrice == input.ReservePrice ||
                    (this.ReservePrice != null &&
                    this.ReservePrice.Equals(input.ReservePrice))
                ) && 
                (
                    this.EstimatedSalePrice == input.EstimatedSalePrice ||
                    (this.EstimatedSalePrice != null &&
                    this.EstimatedSalePrice.Equals(input.EstimatedSalePrice))
                ) && 
                (
                    this.PropertyTypes == input.PropertyTypes ||
                    this.PropertyTypes != null &&
                    input.PropertyTypes != null &&
                    this.PropertyTypes.SequenceEqual(input.PropertyTypes)
                ) && 
                (
                    this.AuthorityType == input.AuthorityType ||
                    (this.AuthorityType != null &&
                    this.AuthorityType.Equals(input.AuthorityType))
                ) && 
                (
                    this.ExclusivePeriodDays == input.ExclusivePeriodDays ||
                    (this.ExclusivePeriodDays != null &&
                    this.ExclusivePeriodDays.Equals(input.ExclusivePeriodDays))
                ) && 
                (
                    this.ExclusiveContinuingPeriodDays == input.ExclusiveContinuingPeriodDays ||
                    (this.ExclusiveContinuingPeriodDays != null &&
                    this.ExclusiveContinuingPeriodDays.Equals(input.ExclusiveContinuingPeriodDays))
                ) && 
                (
                    this.ExclusivePeriodStartDate == input.ExclusivePeriodStartDate ||
                    (this.ExclusivePeriodStartDate != null &&
                    this.ExclusivePeriodStartDate.Equals(input.ExclusivePeriodStartDate))
                ) && 
                (
                    this.ActionDate == input.ActionDate ||
                    (this.ActionDate != null &&
                    this.ActionDate.Equals(input.ActionDate))
                ) && 
                (
                    this.StatementOfInformation == input.StatementOfInformation ||
                    (this.StatementOfInformation != null &&
                    this.StatementOfInformation.Equals(input.StatementOfInformation))
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ListingStatus != null)
                    hashCode = hashCode * 59 + this.ListingStatus.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.DomainAgencyId != null)
                    hashCode = hashCode * 59 + this.DomainAgencyId.GetHashCode();
                if (this.ListingProvider != null)
                    hashCode = hashCode * 59 + this.ListingProvider.GetHashCode();
                if (this.ProviderAdId != null)
                    hashCode = hashCode * 59 + this.ProviderAdId.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                if (this.Bedrooms != null)
                    hashCode = hashCode * 59 + this.Bedrooms.GetHashCode();
                if (this.Bathrooms != null)
                    hashCode = hashCode * 59 + this.Bathrooms.GetHashCode();
                if (this.Carspaces != null)
                    hashCode = hashCode * 59 + this.Carspaces.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.AuthorityExecutedDate != null)
                    hashCode = hashCode * 59 + this.AuthorityExecutedDate.GetHashCode();
                if (this.ReservePrice != null)
                    hashCode = hashCode * 59 + this.ReservePrice.GetHashCode();
                if (this.EstimatedSalePrice != null)
                    hashCode = hashCode * 59 + this.EstimatedSalePrice.GetHashCode();
                if (this.PropertyTypes != null)
                    hashCode = hashCode * 59 + this.PropertyTypes.GetHashCode();
                if (this.AuthorityType != null)
                    hashCode = hashCode * 59 + this.AuthorityType.GetHashCode();
                if (this.ExclusivePeriodDays != null)
                    hashCode = hashCode * 59 + this.ExclusivePeriodDays.GetHashCode();
                if (this.ExclusiveContinuingPeriodDays != null)
                    hashCode = hashCode * 59 + this.ExclusiveContinuingPeriodDays.GetHashCode();
                if (this.ExclusivePeriodStartDate != null)
                    hashCode = hashCode * 59 + this.ExclusivePeriodStartDate.GetHashCode();
                if (this.ActionDate != null)
                    hashCode = hashCode * 59 + this.ActionDate.GetHashCode();
                if (this.StatementOfInformation != null)
                    hashCode = hashCode * 59 + this.StatementOfInformation.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
