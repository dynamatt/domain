/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Domain.Client;
using Domain.Model;

namespace Domain.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IListingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertbusinessoffmarket (ListingAdminV2BusinessOffMarketListing body);

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertbusinessoffmarketWithHttpInfo (ListingAdminV2BusinessOffMarketListing body);
        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertbusinessoffmarket (ListingAdminV2BusinessOffMarketListing body);

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertbusinessoffmarketWithHttpInfo (ListingAdminV2BusinessOffMarketListing body);
        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertcommerciallisting (ListingAdminV2CommercialListingV2 body);

        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertcommerciallistingWithHttpInfo (ListingAdminV2CommercialListingV2 body);
        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertcommerciallisting (ListingAdminV2CommercialListingV2 body);

        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertcommerciallistingWithHttpInfo (ListingAdminV2CommercialListingV2 body);
        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertcommercialoffmarket (ListingAdminV2CommercialOffMarketListing body);

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertcommercialoffmarketWithHttpInfo (ListingAdminV2CommercialOffMarketListing body);
        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertcommercialoffmarket (ListingAdminV2CommercialOffMarketListing body);

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertcommercialoffmarketWithHttpInfo (ListingAdminV2CommercialOffMarketListing body);
        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertresidentialoffmarket (ListingAdminV2ResidentialOffMarketListing body);

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertresidentialoffmarketWithHttpInfo (ListingAdminV2ResidentialOffMarketListing body);
        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        ListingAdminV2ListingResponse ListingsUpsertresidentialoffmarket (ListingAdminV2ResidentialOffMarketListing body);

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        ApiResponse<ListingAdminV2ListingResponse> ListingsUpsertresidentialoffmarketWithHttpInfo (ListingAdminV2ResidentialOffMarketListing body);
        /// <summary>
        /// Retrieves a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>PreMarketV1ListingResponse</returns>
        PreMarketV1ListingResponse PreMarketGet (string id);

        /// <summary>
        /// Retrieves a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>ApiResponse of PreMarketV1ListingResponse</returns>
        ApiResponse<PreMarketV1ListingResponse> PreMarketGetWithHttpInfo (string id);
        /// <summary>
        /// Patch document based on the listing Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body">&#x60;&#x60;&#x60;
Examples:
[
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/bedrooms&quot;,
	&quot;value&quot;: 3
   },
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/listingStatus&quot;,
	&quot;value&quot;: &quot;sold&quot;
},
{
	&quot;op&quot;: &quot;remove&quot;,
	&quot;path&quot;: &quot;/StatementOfInformation&quot;
},
{
	&quot;op&quot;: &quot;add&quot;,
	&quot;path&quot;: &quot;/contacts/-&quot;,
	&quot;value&quot;: {
		&quot;firstName&quot;: &quot;lily&quot;,
		&quot;lastName&quot;: &quot;li&quot;,
		&quot;email&quot;: &quot;lily.li@domain.com.au&quot;,
		&quot;phone&quot;: &quot;0411111111&quot;,
		&quot;mobile&quot;: null,
		&quot;fax&quot;: null
	}
}
]
&#x60;&#x60;&#x60; (optional)</param>
        /// <returns>PreMarketV1ListingRequest</returns>
        PreMarketV1ListingRequest PreMarketPatch (string id, PreMarketV1ListingRequestJsonPatchDocument body = null);

        /// <summary>
        /// Patch document based on the listing Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body">&#x60;&#x60;&#x60;
Examples:
[
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/bedrooms&quot;,
	&quot;value&quot;: 3
   },
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/listingStatus&quot;,
	&quot;value&quot;: &quot;sold&quot;
},
{
	&quot;op&quot;: &quot;remove&quot;,
	&quot;path&quot;: &quot;/StatementOfInformation&quot;
},
{
	&quot;op&quot;: &quot;add&quot;,
	&quot;path&quot;: &quot;/contacts/-&quot;,
	&quot;value&quot;: {
		&quot;firstName&quot;: &quot;lily&quot;,
		&quot;lastName&quot;: &quot;li&quot;,
		&quot;email&quot;: &quot;lily.li@domain.com.au&quot;,
		&quot;phone&quot;: &quot;0411111111&quot;,
		&quot;mobile&quot;: null,
		&quot;fax&quot;: null
	}
}
]
&#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of PreMarketV1ListingRequest</returns>
        ApiResponse<PreMarketV1ListingRequest> PreMarketPatchWithHttpInfo (string id, PreMarketV1ListingRequestJsonPatchDocument body = null);
        /// <summary>
        /// Creates or updates a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-portal listing request. (optional)</param>
        /// <returns>PreMarketV1CreateOrUpdateListingResponse</returns>
        PreMarketV1CreateOrUpdateListingResponse PreMarketPost (PreMarketV1ListingRequest body = null);

        /// <summary>
        /// Creates or updates a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-portal listing request. (optional)</param>
        /// <returns>ApiResponse of PreMarketV1CreateOrUpdateListingResponse</returns>
        ApiResponse<PreMarketV1CreateOrUpdateListingResponse> PreMarketPostWithHttpInfo (PreMarketV1ListingRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertbusinessoffmarketAsync (ListingAdminV2BusinessOffMarketListing body);

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertbusinessoffmarketAsyncWithHttpInfo (ListingAdminV2BusinessOffMarketListing body);
        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertbusinessoffmarketAsync (ListingAdminV2BusinessOffMarketListing body);

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertbusinessoffmarketAsyncWithHttpInfo (ListingAdminV2BusinessOffMarketListing body);
        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommerciallistingAsync (ListingAdminV2CommercialListingV2 body);

        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommerciallistingAsyncWithHttpInfo (ListingAdminV2CommercialListingV2 body);
        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommerciallistingAsync (ListingAdminV2CommercialListingV2 body);

        /// <summary>
        /// Creates a commercial listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommerciallistingAsyncWithHttpInfo (ListingAdminV2CommercialListingV2 body);
        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommercialoffmarketAsync (ListingAdminV2CommercialOffMarketListing body);

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommercialoffmarketAsyncWithHttpInfo (ListingAdminV2CommercialOffMarketListing body);
        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommercialoffmarketAsync (ListingAdminV2CommercialOffMarketListing body);

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommercialoffmarketAsyncWithHttpInfo (ListingAdminV2CommercialOffMarketListing body);
        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertresidentialoffmarketAsync (ListingAdminV2ResidentialOffMarketListing body);

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertresidentialoffmarketAsyncWithHttpInfo (ListingAdminV2ResidentialOffMarketListing body);
        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertresidentialoffmarketAsync (ListingAdminV2ResidentialOffMarketListing body);

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertresidentialoffmarketAsyncWithHttpInfo (ListingAdminV2ResidentialOffMarketListing body);
        /// <summary>
        /// Retrieves a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>Task of PreMarketV1ListingResponse</returns>
        System.Threading.Tasks.Task<PreMarketV1ListingResponse> PreMarketGetAsync (string id);

        /// <summary>
        /// Retrieves a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>Task of ApiResponse (PreMarketV1ListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreMarketV1ListingResponse>> PreMarketGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Patch document based on the listing Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body">&#x60;&#x60;&#x60;
Examples:
[
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/bedrooms&quot;,
	&quot;value&quot;: 3
   },
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/listingStatus&quot;,
	&quot;value&quot;: &quot;sold&quot;
},
{
	&quot;op&quot;: &quot;remove&quot;,
	&quot;path&quot;: &quot;/StatementOfInformation&quot;
},
{
	&quot;op&quot;: &quot;add&quot;,
	&quot;path&quot;: &quot;/contacts/-&quot;,
	&quot;value&quot;: {
		&quot;firstName&quot;: &quot;lily&quot;,
		&quot;lastName&quot;: &quot;li&quot;,
		&quot;email&quot;: &quot;lily.li@domain.com.au&quot;,
		&quot;phone&quot;: &quot;0411111111&quot;,
		&quot;mobile&quot;: null,
		&quot;fax&quot;: null
	}
}
]
&#x60;&#x60;&#x60; (optional)</param>
        /// <returns>Task of PreMarketV1ListingRequest</returns>
        System.Threading.Tasks.Task<PreMarketV1ListingRequest> PreMarketPatchAsync (string id, PreMarketV1ListingRequestJsonPatchDocument body = null);

        /// <summary>
        /// Patch document based on the listing Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body">&#x60;&#x60;&#x60;
Examples:
[
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/bedrooms&quot;,
	&quot;value&quot;: 3
   },
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/listingStatus&quot;,
	&quot;value&quot;: &quot;sold&quot;
},
{
	&quot;op&quot;: &quot;remove&quot;,
	&quot;path&quot;: &quot;/StatementOfInformation&quot;
},
{
	&quot;op&quot;: &quot;add&quot;,
	&quot;path&quot;: &quot;/contacts/-&quot;,
	&quot;value&quot;: {
		&quot;firstName&quot;: &quot;lily&quot;,
		&quot;lastName&quot;: &quot;li&quot;,
		&quot;email&quot;: &quot;lily.li@domain.com.au&quot;,
		&quot;phone&quot;: &quot;0411111111&quot;,
		&quot;mobile&quot;: null,
		&quot;fax&quot;: null
	}
}
]
&#x60;&#x60;&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (PreMarketV1ListingRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreMarketV1ListingRequest>> PreMarketPatchAsyncWithHttpInfo (string id, PreMarketV1ListingRequestJsonPatchDocument body = null);
        /// <summary>
        /// Creates or updates a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-portal listing request. (optional)</param>
        /// <returns>Task of PreMarketV1CreateOrUpdateListingResponse</returns>
        System.Threading.Tasks.Task<PreMarketV1CreateOrUpdateListingResponse> PreMarketPostAsync (PreMarketV1ListingRequest body = null);

        /// <summary>
        /// Creates or updates a pre-portal listing.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-portal listing request. (optional)</param>
        /// <returns>Task of ApiResponse (PreMarketV1CreateOrUpdateListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreMarketV1CreateOrUpdateListingResponse>> PreMarketPostAsyncWithHttpInfo (PreMarketV1ListingRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ListingsApi : IListingsApi
    {
        private Domain.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListingsApi(String basePath)
        {
            this.Configuration = new Domain.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Domain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ListingsApi()
        {
            this.Configuration = Domain.Client.Configuration.Default;

            ExceptionFactory = Domain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListingsApi(Domain.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Domain.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Domain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertbusinessoffmarket (ListingAdminV2BusinessOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertbusinessoffmarketWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public ApiResponse< ListingAdminV2ListingResponse > ListingsUpsertbusinessoffmarketWithHttpInfo (ListingAdminV2BusinessOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertbusinessoffmarket");

            var localVarPath = "/v2/listings/business/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertbusinessoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertbusinessoffmarketAsync (ListingAdminV2BusinessOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertbusinessoffmarketAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertbusinessoffmarketAsyncWithHttpInfo (ListingAdminV2BusinessOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertbusinessoffmarket");

            var localVarPath = "/v2/listings/business/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertbusinessoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertbusinessoffmarket (ListingAdminV2BusinessOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertbusinessoffmarketWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public ApiResponse< ListingAdminV2ListingResponse > ListingsUpsertbusinessoffmarketWithHttpInfo (ListingAdminV2BusinessOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertbusinessoffmarket");

            var localVarPath = "/v2/listings/business/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (saleInfo != null) localVarFormParams.Add("saleInfo", this.Configuration.ApiClient.ParameterToString(saleInfo)); // form parameter
            if (domainAdId != null) localVarFormParams.Add("domainAdId", this.Configuration.ApiClient.ParameterToString(domainAdId)); // form parameter
            if (inspectionDetails != null) localVarFormParams.Add("inspectionDetails", this.Configuration.ApiClient.ParameterToString(inspectionDetails)); // form parameter
            if (isRural != null) localVarFormParams.Add("isRural", this.Configuration.ApiClient.ParameterToString(isRural)); // form parameter
            if (listingProvider != null) localVarFormParams.Add("listingProvider", this.Configuration.ApiClient.ParameterToString(listingProvider)); // form parameter
            if (domainAgencyID != null) localVarFormParams.Add("domainAgencyID", this.Configuration.ApiClient.ParameterToString(domainAgencyID)); // form parameter
            if (providerAdId != null) localVarFormParams.Add("providerAdId", this.Configuration.ApiClient.ParameterToString(providerAdId)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (summary != null) localVarFormParams.Add("summary", this.Configuration.ApiClient.ParameterToString(summary)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (listingAction != null) localVarFormParams.Add("listingAction", this.Configuration.ApiClient.ParameterToString(listingAction)); // form parameter
            if (offMarketDetails != null) localVarFormParams.Add("offMarketDetails", this.Configuration.ApiClient.ParameterToString(offMarketDetails)); // form parameter
            if (propertyDetails != null) localVarFormParams.Add("propertyDetails", this.Configuration.ApiClient.ParameterToString(propertyDetails)); // form parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertbusinessoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertbusinessoffmarketAsync (ListingAdminV2BusinessOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertbusinessoffmarketAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an externally sold business listing; or takes an existing business listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertbusinessoffmarketAsyncWithHttpInfo (ListingAdminV2BusinessOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertbusinessoffmarket");

            var localVarPath = "/v2/listings/business/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (saleInfo != null) localVarFormParams.Add("saleInfo", this.Configuration.ApiClient.ParameterToString(saleInfo)); // form parameter
            if (domainAdId != null) localVarFormParams.Add("domainAdId", this.Configuration.ApiClient.ParameterToString(domainAdId)); // form parameter
            if (inspectionDetails != null) localVarFormParams.Add("inspectionDetails", this.Configuration.ApiClient.ParameterToString(inspectionDetails)); // form parameter
            if (isRural != null) localVarFormParams.Add("isRural", this.Configuration.ApiClient.ParameterToString(isRural)); // form parameter
            if (listingProvider != null) localVarFormParams.Add("listingProvider", this.Configuration.ApiClient.ParameterToString(listingProvider)); // form parameter
            if (domainAgencyID != null) localVarFormParams.Add("domainAgencyID", this.Configuration.ApiClient.ParameterToString(domainAgencyID)); // form parameter
            if (providerAdId != null) localVarFormParams.Add("providerAdId", this.Configuration.ApiClient.ParameterToString(providerAdId)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (summary != null) localVarFormParams.Add("summary", this.Configuration.ApiClient.ParameterToString(summary)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (listingAction != null) localVarFormParams.Add("listingAction", this.Configuration.ApiClient.ParameterToString(listingAction)); // form parameter
            if (offMarketDetails != null) localVarFormParams.Add("offMarketDetails", this.Configuration.ApiClient.ParameterToString(offMarketDetails)); // form parameter
            if (propertyDetails != null) localVarFormParams.Add("propertyDetails", this.Configuration.ApiClient.ParameterToString(propertyDetails)); // form parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertbusinessoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertcommerciallisting (ListingAdminV2CommercialListingV2 body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertcommerciallistingWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public ApiResponse< ListingAdminV2ListingResponse > ListingsUpsertcommerciallistingWithHttpInfo (ListingAdminV2CommercialListingV2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertcommerciallisting");

            var localVarPath = "/v2/listings/commercial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertcommerciallisting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommerciallistingAsync (ListingAdminV2CommercialListingV2 body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertcommerciallistingAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommerciallistingAsyncWithHttpInfo (ListingAdminV2CommercialListingV2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertcommerciallisting");

            var localVarPath = "/v2/listings/commercial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertcommerciallisting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertcommerciallisting (ListingAdminV2CommercialListingV2 body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertcommerciallistingWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public ApiResponse< ListingAdminV2ListingResponse > ListingsUpsertcommerciallistingWithHttpInfo (ListingAdminV2CommercialListingV2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertcommerciallisting");

            var localVarPath = "/v2/listings/commercial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (salePrice != null) localVarFormParams.Add("salePrice", this.Configuration.ApiClient.ParameterToString(salePrice)); // form parameter
            if (leasePrice != null) localVarFormParams.Add("leasePrice", this.Configuration.ApiClient.ParameterToString(leasePrice)); // form parameter
            if (lease != null) localVarFormParams.Add("lease", this.Configuration.ApiClient.ParameterToString(lease)); // form parameter
            if (eoi != null) localVarFormParams.Add("eoi", this.Configuration.ApiClient.ParameterToString(eoi)); // form parameter
            if (tenant != null) localVarFormParams.Add("tenant", this.Configuration.ApiClient.ParameterToString(tenant)); // form parameter
            if (tender != null) localVarFormParams.Add("tender", this.Configuration.ApiClient.ParameterToString(tender)); // form parameter
            if (occupancyType != null) localVarFormParams.Add("occupancyType", this.Configuration.ApiClient.ParameterToString(occupancyType)); // form parameter
            if (annualReturn != null) localVarFormParams.Add("annualReturn", this.Configuration.ApiClient.ParameterToString(annualReturn)); // form parameter
            if (unitsOffered != null) localVarFormParams.Add("unitsOffered", this.Configuration.ApiClient.ParameterToString(unitsOffered)); // form parameter
            if (unitDetails != null) localVarFormParams.Add("unitDetails", this.Configuration.ApiClient.ParameterToString(unitDetails)); // form parameter
            if (nabers != null) localVarFormParams.Add("nabers", this.Configuration.ApiClient.ParameterToString(nabers)); // form parameter
            if (saleTerms != null) localVarFormParams.Add("saleTerms", this.Configuration.ApiClient.ParameterToString(saleTerms)); // form parameter
            if (auction != null) localVarFormParams.Add("auction", this.Configuration.ApiClient.ParameterToString(auction)); // form parameter
            if (propertyDetails != null) localVarFormParams.Add("propertyDetails", this.Configuration.ApiClient.ParameterToString(propertyDetails)); // form parameter
            if (conjunctionAgents != null) localVarFormParams.Add("conjunctionAgents", this.Configuration.ApiClient.ParameterToString(conjunctionAgents)); // form parameter
            if (highlights != null) localVarFormParams.Add("highlights", this.Configuration.ApiClient.ParameterToString(highlights)); // form parameter
            if (underOfferOrContract != null) localVarFormParams.Add("underOfferOrContract", this.Configuration.ApiClient.ParameterToString(underOfferOrContract)); // form parameter
            if (domainAdId != null) localVarFormParams.Add("domainAdId", this.Configuration.ApiClient.ParameterToString(domainAdId)); // form parameter
            if (listingProvider != null) localVarFormParams.Add("listingProvider", this.Configuration.ApiClient.ParameterToString(listingProvider)); // form parameter
            if (domainAgencyID != null) localVarFormParams.Add("domainAgencyID", this.Configuration.ApiClient.ParameterToString(domainAgencyID)); // form parameter
            if (providerAdId != null) localVarFormParams.Add("providerAdId", this.Configuration.ApiClient.ParameterToString(providerAdId)); // form parameter
            if (features != null) localVarFormParams.Add("features", this.Configuration.ApiClient.ParameterToString(features)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (summary != null) localVarFormParams.Add("summary", this.Configuration.ApiClient.ParameterToString(summary)); // form parameter
            if (inspectionDetails != null) localVarFormParams.Add("inspectionDetails", this.Configuration.ApiClient.ParameterToString(inspectionDetails)); // form parameter
            if (media != null) localVarFormParams.Add("media", this.Configuration.ApiClient.ParameterToString(media)); // form parameter
            if (listingAction != null) localVarFormParams.Add("listingAction", this.Configuration.ApiClient.ParameterToString(listingAction)); // form parameter
            if (contactPreference != null) localVarFormParams.Add("contactPreference", this.Configuration.ApiClient.ParameterToString(contactPreference)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (otherEnquiryEmail != null) localVarFormParams.Add("otherEnquiryEmail", this.Configuration.ApiClient.ParameterToString(otherEnquiryEmail)); // form parameter
            if (receiveEmailsToDefaultAddress != null) localVarFormParams.Add("receiveEmailsToDefaultAddress", this.Configuration.ApiClient.ParameterToString(receiveEmailsToDefaultAddress)); // form parameter
            if (isRural != null) localVarFormParams.Add("isRural", this.Configuration.ApiClient.ParameterToString(isRural)); // form parameter
            if (supplementary != null) localVarFormParams.Add("supplementary", this.Configuration.ApiClient.ParameterToString(supplementary)); // form parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertcommerciallisting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommerciallistingAsync (ListingAdminV2CommercialListingV2 body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertcommerciallistingAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a commercial listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommerciallistingAsyncWithHttpInfo (ListingAdminV2CommercialListingV2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertcommerciallisting");

            var localVarPath = "/v2/listings/commercial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (salePrice != null) localVarFormParams.Add("salePrice", this.Configuration.ApiClient.ParameterToString(salePrice)); // form parameter
            if (leasePrice != null) localVarFormParams.Add("leasePrice", this.Configuration.ApiClient.ParameterToString(leasePrice)); // form parameter
            if (lease != null) localVarFormParams.Add("lease", this.Configuration.ApiClient.ParameterToString(lease)); // form parameter
            if (eoi != null) localVarFormParams.Add("eoi", this.Configuration.ApiClient.ParameterToString(eoi)); // form parameter
            if (tenant != null) localVarFormParams.Add("tenant", this.Configuration.ApiClient.ParameterToString(tenant)); // form parameter
            if (tender != null) localVarFormParams.Add("tender", this.Configuration.ApiClient.ParameterToString(tender)); // form parameter
            if (occupancyType != null) localVarFormParams.Add("occupancyType", this.Configuration.ApiClient.ParameterToString(occupancyType)); // form parameter
            if (annualReturn != null) localVarFormParams.Add("annualReturn", this.Configuration.ApiClient.ParameterToString(annualReturn)); // form parameter
            if (unitsOffered != null) localVarFormParams.Add("unitsOffered", this.Configuration.ApiClient.ParameterToString(unitsOffered)); // form parameter
            if (unitDetails != null) localVarFormParams.Add("unitDetails", this.Configuration.ApiClient.ParameterToString(unitDetails)); // form parameter
            if (nabers != null) localVarFormParams.Add("nabers", this.Configuration.ApiClient.ParameterToString(nabers)); // form parameter
            if (saleTerms != null) localVarFormParams.Add("saleTerms", this.Configuration.ApiClient.ParameterToString(saleTerms)); // form parameter
            if (auction != null) localVarFormParams.Add("auction", this.Configuration.ApiClient.ParameterToString(auction)); // form parameter
            if (propertyDetails != null) localVarFormParams.Add("propertyDetails", this.Configuration.ApiClient.ParameterToString(propertyDetails)); // form parameter
            if (conjunctionAgents != null) localVarFormParams.Add("conjunctionAgents", this.Configuration.ApiClient.ParameterToString(conjunctionAgents)); // form parameter
            if (highlights != null) localVarFormParams.Add("highlights", this.Configuration.ApiClient.ParameterToString(highlights)); // form parameter
            if (underOfferOrContract != null) localVarFormParams.Add("underOfferOrContract", this.Configuration.ApiClient.ParameterToString(underOfferOrContract)); // form parameter
            if (domainAdId != null) localVarFormParams.Add("domainAdId", this.Configuration.ApiClient.ParameterToString(domainAdId)); // form parameter
            if (listingProvider != null) localVarFormParams.Add("listingProvider", this.Configuration.ApiClient.ParameterToString(listingProvider)); // form parameter
            if (domainAgencyID != null) localVarFormParams.Add("domainAgencyID", this.Configuration.ApiClient.ParameterToString(domainAgencyID)); // form parameter
            if (providerAdId != null) localVarFormParams.Add("providerAdId", this.Configuration.ApiClient.ParameterToString(providerAdId)); // form parameter
            if (features != null) localVarFormParams.Add("features", this.Configuration.ApiClient.ParameterToString(features)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (summary != null) localVarFormParams.Add("summary", this.Configuration.ApiClient.ParameterToString(summary)); // form parameter
            if (inspectionDetails != null) localVarFormParams.Add("inspectionDetails", this.Configuration.ApiClient.ParameterToString(inspectionDetails)); // form parameter
            if (media != null) localVarFormParams.Add("media", this.Configuration.ApiClient.ParameterToString(media)); // form parameter
            if (listingAction != null) localVarFormParams.Add("listingAction", this.Configuration.ApiClient.ParameterToString(listingAction)); // form parameter
            if (contactPreference != null) localVarFormParams.Add("contactPreference", this.Configuration.ApiClient.ParameterToString(contactPreference)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (otherEnquiryEmail != null) localVarFormParams.Add("otherEnquiryEmail", this.Configuration.ApiClient.ParameterToString(otherEnquiryEmail)); // form parameter
            if (receiveEmailsToDefaultAddress != null) localVarFormParams.Add("receiveEmailsToDefaultAddress", this.Configuration.ApiClient.ParameterToString(receiveEmailsToDefaultAddress)); // form parameter
            if (isRural != null) localVarFormParams.Add("isRural", this.Configuration.ApiClient.ParameterToString(isRural)); // form parameter
            if (supplementary != null) localVarFormParams.Add("supplementary", this.Configuration.ApiClient.ParameterToString(supplementary)); // form parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertcommerciallisting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertcommercialoffmarket (ListingAdminV2CommercialOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertcommercialoffmarketWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public ApiResponse< ListingAdminV2ListingResponse > ListingsUpsertcommercialoffmarketWithHttpInfo (ListingAdminV2CommercialOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertcommercialoffmarket");

            var localVarPath = "/v2/listings/commercial/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertcommercialoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommercialoffmarketAsync (ListingAdminV2CommercialOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertcommercialoffmarketAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommercialoffmarketAsyncWithHttpInfo (ListingAdminV2CommercialOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertcommercialoffmarket");

            var localVarPath = "/v2/listings/commercial/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertcommercialoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertcommercialoffmarket (ListingAdminV2CommercialOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertcommercialoffmarketWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public ApiResponse< ListingAdminV2ListingResponse > ListingsUpsertcommercialoffmarketWithHttpInfo (ListingAdminV2CommercialOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertcommercialoffmarket");

            var localVarPath = "/v2/listings/commercial/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitsOffered != null) localVarFormParams.Add("unitsOffered", this.Configuration.ApiClient.ParameterToString(unitsOffered)); // form parameter
            if (unitDetails != null) localVarFormParams.Add("unitDetails", this.Configuration.ApiClient.ParameterToString(unitDetails)); // form parameter
            if (annualReturn != null) localVarFormParams.Add("annualReturn", this.Configuration.ApiClient.ParameterToString(annualReturn)); // form parameter
            if (nabers != null) localVarFormParams.Add("nabers", this.Configuration.ApiClient.ParameterToString(nabers)); // form parameter
            if (highlights != null) localVarFormParams.Add("highlights", this.Configuration.ApiClient.ParameterToString(highlights)); // form parameter
            if (domainAdId != null) localVarFormParams.Add("domainAdId", this.Configuration.ApiClient.ParameterToString(domainAdId)); // form parameter
            if (inspectionDetails != null) localVarFormParams.Add("inspectionDetails", this.Configuration.ApiClient.ParameterToString(inspectionDetails)); // form parameter
            if (isRural != null) localVarFormParams.Add("isRural", this.Configuration.ApiClient.ParameterToString(isRural)); // form parameter
            if (listingProvider != null) localVarFormParams.Add("listingProvider", this.Configuration.ApiClient.ParameterToString(listingProvider)); // form parameter
            if (domainAgencyID != null) localVarFormParams.Add("domainAgencyID", this.Configuration.ApiClient.ParameterToString(domainAgencyID)); // form parameter
            if (providerAdId != null) localVarFormParams.Add("providerAdId", this.Configuration.ApiClient.ParameterToString(providerAdId)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (summary != null) localVarFormParams.Add("summary", this.Configuration.ApiClient.ParameterToString(summary)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (listingAction != null) localVarFormParams.Add("listingAction", this.Configuration.ApiClient.ParameterToString(listingAction)); // form parameter
            if (offMarketDetails != null) localVarFormParams.Add("offMarketDetails", this.Configuration.ApiClient.ParameterToString(offMarketDetails)); // form parameter
            if (propertyDetails != null) localVarFormParams.Add("propertyDetails", this.Configuration.ApiClient.ParameterToString(propertyDetails)); // form parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertcommercialoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertcommercialoffmarketAsync (ListingAdminV2CommercialOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertcommercialoffmarketAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an externally sold or leased commercial listing; or takes an existing commercial listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertcommercialoffmarketAsyncWithHttpInfo (ListingAdminV2CommercialOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertcommercialoffmarket");

            var localVarPath = "/v2/listings/commercial/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unitsOffered != null) localVarFormParams.Add("unitsOffered", this.Configuration.ApiClient.ParameterToString(unitsOffered)); // form parameter
            if (unitDetails != null) localVarFormParams.Add("unitDetails", this.Configuration.ApiClient.ParameterToString(unitDetails)); // form parameter
            if (annualReturn != null) localVarFormParams.Add("annualReturn", this.Configuration.ApiClient.ParameterToString(annualReturn)); // form parameter
            if (nabers != null) localVarFormParams.Add("nabers", this.Configuration.ApiClient.ParameterToString(nabers)); // form parameter
            if (highlights != null) localVarFormParams.Add("highlights", this.Configuration.ApiClient.ParameterToString(highlights)); // form parameter
            if (domainAdId != null) localVarFormParams.Add("domainAdId", this.Configuration.ApiClient.ParameterToString(domainAdId)); // form parameter
            if (inspectionDetails != null) localVarFormParams.Add("inspectionDetails", this.Configuration.ApiClient.ParameterToString(inspectionDetails)); // form parameter
            if (isRural != null) localVarFormParams.Add("isRural", this.Configuration.ApiClient.ParameterToString(isRural)); // form parameter
            if (listingProvider != null) localVarFormParams.Add("listingProvider", this.Configuration.ApiClient.ParameterToString(listingProvider)); // form parameter
            if (domainAgencyID != null) localVarFormParams.Add("domainAgencyID", this.Configuration.ApiClient.ParameterToString(domainAgencyID)); // form parameter
            if (providerAdId != null) localVarFormParams.Add("providerAdId", this.Configuration.ApiClient.ParameterToString(providerAdId)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (summary != null) localVarFormParams.Add("summary", this.Configuration.ApiClient.ParameterToString(summary)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (listingAction != null) localVarFormParams.Add("listingAction", this.Configuration.ApiClient.ParameterToString(listingAction)); // form parameter
            if (offMarketDetails != null) localVarFormParams.Add("offMarketDetails", this.Configuration.ApiClient.ParameterToString(offMarketDetails)); // form parameter
            if (propertyDetails != null) localVarFormParams.Add("propertyDetails", this.Configuration.ApiClient.ParameterToString(propertyDetails)); // form parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertcommercialoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertresidentialoffmarket (ListingAdminV2ResidentialOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertresidentialoffmarketWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public ApiResponse< ListingAdminV2ListingResponse > ListingsUpsertresidentialoffmarketWithHttpInfo (ListingAdminV2ResidentialOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertresidentialoffmarket");

            var localVarPath = "/v2/listings/residential/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertresidentialoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertresidentialoffmarketAsync (ListingAdminV2ResidentialOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertresidentialoffmarketAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertresidentialoffmarketAsyncWithHttpInfo (ListingAdminV2ResidentialOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertresidentialoffmarket");

            var localVarPath = "/v2/listings/residential/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertresidentialoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ListingAdminV2ListingResponse</returns>
        public ListingAdminV2ListingResponse ListingsUpsertresidentialoffmarket (ListingAdminV2ResidentialOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = ListingsUpsertresidentialoffmarketWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>ApiResponse of ListingAdminV2ListingResponse</returns>
        public ApiResponse< ListingAdminV2ListingResponse > ListingsUpsertresidentialoffmarketWithHttpInfo (ListingAdminV2ResidentialOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertresidentialoffmarket");

            var localVarPath = "/v2/listings/residential/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainAdId != null) localVarFormParams.Add("domainAdId", this.Configuration.ApiClient.ParameterToString(domainAdId)); // form parameter
            if (inspectionDetails != null) localVarFormParams.Add("inspectionDetails", this.Configuration.ApiClient.ParameterToString(inspectionDetails)); // form parameter
            if (isRural != null) localVarFormParams.Add("isRural", this.Configuration.ApiClient.ParameterToString(isRural)); // form parameter
            if (listingProvider != null) localVarFormParams.Add("listingProvider", this.Configuration.ApiClient.ParameterToString(listingProvider)); // form parameter
            if (domainAgencyID != null) localVarFormParams.Add("domainAgencyID", this.Configuration.ApiClient.ParameterToString(domainAgencyID)); // form parameter
            if (providerAdId != null) localVarFormParams.Add("providerAdId", this.Configuration.ApiClient.ParameterToString(providerAdId)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (summary != null) localVarFormParams.Add("summary", this.Configuration.ApiClient.ParameterToString(summary)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (listingAction != null) localVarFormParams.Add("listingAction", this.Configuration.ApiClient.ParameterToString(listingAction)); // form parameter
            if (offMarketDetails != null) localVarFormParams.Add("offMarketDetails", this.Configuration.ApiClient.ParameterToString(offMarketDetails)); // form parameter
            if (propertyDetails != null) localVarFormParams.Add("propertyDetails", this.Configuration.ApiClient.ParameterToString(propertyDetails)); // form parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertresidentialoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ListingAdminV2ListingResponse</returns>
        public async System.Threading.Tasks.Task<ListingAdminV2ListingResponse> ListingsUpsertresidentialoffmarketAsync (ListingAdminV2ResidentialOffMarketListing body)
        {
             ApiResponse<ListingAdminV2ListingResponse> localVarResponse = await ListingsUpsertresidentialoffmarketAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an externally sold or leased residential listing; or takes an existing residential listing off the market. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Listing data</param>
        /// <returns>Task of ApiResponse (ListingAdminV2ListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingAdminV2ListingResponse>> ListingsUpsertresidentialoffmarketAsyncWithHttpInfo (ListingAdminV2ResidentialOffMarketListing body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ListingsApi->ListingsUpsertresidentialoffmarket");

            var localVarPath = "/v2/listings/residential/offmarket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domainAdId != null) localVarFormParams.Add("domainAdId", this.Configuration.ApiClient.ParameterToString(domainAdId)); // form parameter
            if (inspectionDetails != null) localVarFormParams.Add("inspectionDetails", this.Configuration.ApiClient.ParameterToString(inspectionDetails)); // form parameter
            if (isRural != null) localVarFormParams.Add("isRural", this.Configuration.ApiClient.ParameterToString(isRural)); // form parameter
            if (listingProvider != null) localVarFormParams.Add("listingProvider", this.Configuration.ApiClient.ParameterToString(listingProvider)); // form parameter
            if (domainAgencyID != null) localVarFormParams.Add("domainAgencyID", this.Configuration.ApiClient.ParameterToString(domainAgencyID)); // form parameter
            if (providerAdId != null) localVarFormParams.Add("providerAdId", this.Configuration.ApiClient.ParameterToString(providerAdId)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (summary != null) localVarFormParams.Add("summary", this.Configuration.ApiClient.ParameterToString(summary)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (listingAction != null) localVarFormParams.Add("listingAction", this.Configuration.ApiClient.ParameterToString(listingAction)); // form parameter
            if (offMarketDetails != null) localVarFormParams.Add("offMarketDetails", this.Configuration.ApiClient.ParameterToString(offMarketDetails)); // form parameter
            if (propertyDetails != null) localVarFormParams.Add("propertyDetails", this.Configuration.ApiClient.ParameterToString(propertyDetails)); // form parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListingsUpsertresidentialoffmarket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingAdminV2ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListingAdminV2ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingAdminV2ListingResponse)));
        }

        /// <summary>
        /// Retrieves a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>PreMarketV1ListingResponse</returns>
        public PreMarketV1ListingResponse PreMarketGet (string id)
        {
             ApiResponse<PreMarketV1ListingResponse> localVarResponse = PreMarketGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>ApiResponse of PreMarketV1ListingResponse</returns>
        public ApiResponse< PreMarketV1ListingResponse > PreMarketGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ListingsApi->PreMarketGet");

            var localVarPath = "/v2/premarket/listings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreMarketGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreMarketV1ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreMarketV1ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreMarketV1ListingResponse)));
        }

        /// <summary>
        /// Retrieves a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>Task of PreMarketV1ListingResponse</returns>
        public async System.Threading.Tasks.Task<PreMarketV1ListingResponse> PreMarketGetAsync (string id)
        {
             ApiResponse<PreMarketV1ListingResponse> localVarResponse = await PreMarketGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pre-portal listing ID.</param>
        /// <returns>Task of ApiResponse (PreMarketV1ListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PreMarketV1ListingResponse>> PreMarketGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ListingsApi->PreMarketGet");

            var localVarPath = "/v2/premarket/listings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreMarketGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreMarketV1ListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreMarketV1ListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreMarketV1ListingResponse)));
        }

        /// <summary>
        /// Patch document based on the listing Id 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body">&#x60;&#x60;&#x60;
Examples:
[
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/bedrooms&quot;,
	&quot;value&quot;: 3
   },
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/listingStatus&quot;,
	&quot;value&quot;: &quot;sold&quot;
},
{
	&quot;op&quot;: &quot;remove&quot;,
	&quot;path&quot;: &quot;/StatementOfInformation&quot;
},
{
	&quot;op&quot;: &quot;add&quot;,
	&quot;path&quot;: &quot;/contacts/-&quot;,
	&quot;value&quot;: {
		&quot;firstName&quot;: &quot;lily&quot;,
		&quot;lastName&quot;: &quot;li&quot;,
		&quot;email&quot;: &quot;lily.li@domain.com.au&quot;,
		&quot;phone&quot;: &quot;0411111111&quot;,
		&quot;mobile&quot;: null,
		&quot;fax&quot;: null
	}
}
]
&#x60;&#x60;&#x60; (optional)</param>
        /// <returns>PreMarketV1ListingRequest</returns>
        public PreMarketV1ListingRequest PreMarketPatch (string id, PreMarketV1ListingRequestJsonPatchDocument body = null)
        {
             ApiResponse<PreMarketV1ListingRequest> localVarResponse = PreMarketPatchWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch document based on the listing Id 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body">&#x60;&#x60;&#x60;
Examples:
[
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/bedrooms&quot;,
	&quot;value&quot;: 3
   },
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/listingStatus&quot;,
	&quot;value&quot;: &quot;sold&quot;
},
{
	&quot;op&quot;: &quot;remove&quot;,
	&quot;path&quot;: &quot;/StatementOfInformation&quot;
},
{
	&quot;op&quot;: &quot;add&quot;,
	&quot;path&quot;: &quot;/contacts/-&quot;,
	&quot;value&quot;: {
		&quot;firstName&quot;: &quot;lily&quot;,
		&quot;lastName&quot;: &quot;li&quot;,
		&quot;email&quot;: &quot;lily.li@domain.com.au&quot;,
		&quot;phone&quot;: &quot;0411111111&quot;,
		&quot;mobile&quot;: null,
		&quot;fax&quot;: null
	}
}
]
&#x60;&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of PreMarketV1ListingRequest</returns>
        public ApiResponse< PreMarketV1ListingRequest > PreMarketPatchWithHttpInfo (string id, PreMarketV1ListingRequestJsonPatchDocument body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ListingsApi->PreMarketPatch");

            var localVarPath = "/v2/premarket/listings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreMarketPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreMarketV1ListingRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreMarketV1ListingRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreMarketV1ListingRequest)));
        }

        /// <summary>
        /// Patch document based on the listing Id 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body">&#x60;&#x60;&#x60;
Examples:
[
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/bedrooms&quot;,
	&quot;value&quot;: 3
   },
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/listingStatus&quot;,
	&quot;value&quot;: &quot;sold&quot;
},
{
	&quot;op&quot;: &quot;remove&quot;,
	&quot;path&quot;: &quot;/StatementOfInformation&quot;
},
{
	&quot;op&quot;: &quot;add&quot;,
	&quot;path&quot;: &quot;/contacts/-&quot;,
	&quot;value&quot;: {
		&quot;firstName&quot;: &quot;lily&quot;,
		&quot;lastName&quot;: &quot;li&quot;,
		&quot;email&quot;: &quot;lily.li@domain.com.au&quot;,
		&quot;phone&quot;: &quot;0411111111&quot;,
		&quot;mobile&quot;: null,
		&quot;fax&quot;: null
	}
}
]
&#x60;&#x60;&#x60; (optional)</param>
        /// <returns>Task of PreMarketV1ListingRequest</returns>
        public async System.Threading.Tasks.Task<PreMarketV1ListingRequest> PreMarketPatchAsync (string id, PreMarketV1ListingRequestJsonPatchDocument body = null)
        {
             ApiResponse<PreMarketV1ListingRequest> localVarResponse = await PreMarketPatchAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch document based on the listing Id 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body">&#x60;&#x60;&#x60;
Examples:
[
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/bedrooms&quot;,
	&quot;value&quot;: 3
   },
{
	&quot;op&quot;: &quot;replace&quot;,
	&quot;path&quot;: &quot;/listingStatus&quot;,
	&quot;value&quot;: &quot;sold&quot;
},
{
	&quot;op&quot;: &quot;remove&quot;,
	&quot;path&quot;: &quot;/StatementOfInformation&quot;
},
{
	&quot;op&quot;: &quot;add&quot;,
	&quot;path&quot;: &quot;/contacts/-&quot;,
	&quot;value&quot;: {
		&quot;firstName&quot;: &quot;lily&quot;,
		&quot;lastName&quot;: &quot;li&quot;,
		&quot;email&quot;: &quot;lily.li@domain.com.au&quot;,
		&quot;phone&quot;: &quot;0411111111&quot;,
		&quot;mobile&quot;: null,
		&quot;fax&quot;: null
	}
}
]
&#x60;&#x60;&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (PreMarketV1ListingRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PreMarketV1ListingRequest>> PreMarketPatchAsyncWithHttpInfo (string id, PreMarketV1ListingRequestJsonPatchDocument body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ListingsApi->PreMarketPatch");

            var localVarPath = "/v2/premarket/listings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreMarketPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreMarketV1ListingRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreMarketV1ListingRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreMarketV1ListingRequest)));
        }

        /// <summary>
        /// Creates or updates a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-portal listing request. (optional)</param>
        /// <returns>PreMarketV1CreateOrUpdateListingResponse</returns>
        public PreMarketV1CreateOrUpdateListingResponse PreMarketPost (PreMarketV1ListingRequest body = null)
        {
             ApiResponse<PreMarketV1CreateOrUpdateListingResponse> localVarResponse = PreMarketPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-portal listing request. (optional)</param>
        /// <returns>ApiResponse of PreMarketV1CreateOrUpdateListingResponse</returns>
        public ApiResponse< PreMarketV1CreateOrUpdateListingResponse > PreMarketPostWithHttpInfo (PreMarketV1ListingRequest body = null)
        {

            var localVarPath = "/v2/premarket/listings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreMarketPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreMarketV1CreateOrUpdateListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreMarketV1CreateOrUpdateListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreMarketV1CreateOrUpdateListingResponse)));
        }

        /// <summary>
        /// Creates or updates a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-portal listing request. (optional)</param>
        /// <returns>Task of PreMarketV1CreateOrUpdateListingResponse</returns>
        public async System.Threading.Tasks.Task<PreMarketV1CreateOrUpdateListingResponse> PreMarketPostAsync (PreMarketV1ListingRequest body = null)
        {
             ApiResponse<PreMarketV1CreateOrUpdateListingResponse> localVarResponse = await PreMarketPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates or updates a pre-portal listing. 
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-portal listing request. (optional)</param>
        /// <returns>Task of ApiResponse (PreMarketV1CreateOrUpdateListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PreMarketV1CreateOrUpdateListingResponse>> PreMarketPostAsyncWithHttpInfo (PreMarketV1ListingRequest body = null)
        {

            var localVarPath = "/v2/premarket/listings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreMarketPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreMarketV1CreateOrUpdateListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreMarketV1CreateOrUpdateListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreMarketV1CreateOrUpdateListingResponse)));
        }

    }
}
