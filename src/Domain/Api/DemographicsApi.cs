/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Domain.Client;
using Domain.Model;

namespace Domain.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDemographicsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>DemographicsResultsModel</returns>
        DemographicsResultsModel DemographicsGetByNamedSuburb (string state, string suburb, string postcode, string types = null, int? year = null);

        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>ApiResponse of DemographicsResultsModel</returns>
        ApiResponse<DemographicsResultsModel> DemographicsGetByNamedSuburbWithHttpInfo (string state, string suburb, string postcode, string types = null, int? year = null);
        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>DemographicsResultsModel</returns>
        DemographicsResultsModel DemographicsGetByNamedSuburbWithoutPostcode (string state, string suburb, string postcode, string types = null, int? year = null);

        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>ApiResponse of DemographicsResultsModel</returns>
        ApiResponse<DemographicsResultsModel> DemographicsGetByNamedSuburbWithoutPostcodeWithHttpInfo (string state, string suburb, string postcode, string types = null, int? year = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>Task of DemographicsResultsModel</returns>
        System.Threading.Tasks.Task<DemographicsResultsModel> DemographicsGetByNamedSuburbAsync (string state, string suburb, string postcode, string types = null, int? year = null);

        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>Task of ApiResponse (DemographicsResultsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DemographicsResultsModel>> DemographicsGetByNamedSuburbAsyncWithHttpInfo (string state, string suburb, string postcode, string types = null, int? year = null);
        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>Task of DemographicsResultsModel</returns>
        System.Threading.Tasks.Task<DemographicsResultsModel> DemographicsGetByNamedSuburbWithoutPostcodeAsync (string state, string suburb, string postcode, string types = null, int? year = null);

        /// <summary>
        /// Search for demographics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>Task of ApiResponse (DemographicsResultsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DemographicsResultsModel>> DemographicsGetByNamedSuburbWithoutPostcodeAsyncWithHttpInfo (string state, string suburb, string postcode, string types = null, int? year = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DemographicsApi : IDemographicsApi
    {
        private Domain.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DemographicsApi(String basePath)
        {
            this.Configuration = new Domain.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Domain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DemographicsApi()
        {
            this.Configuration = Domain.Client.Configuration.Default;

            ExceptionFactory = Domain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DemographicsApi(Domain.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Domain.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Domain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>DemographicsResultsModel</returns>
        public DemographicsResultsModel DemographicsGetByNamedSuburb (string state, string suburb, string postcode, string types = null, int? year = null)
        {
             ApiResponse<DemographicsResultsModel> localVarResponse = DemographicsGetByNamedSuburbWithHttpInfo(state, suburb, postcode, types, year);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>ApiResponse of DemographicsResultsModel</returns>
        public ApiResponse< DemographicsResultsModel > DemographicsGetByNamedSuburbWithHttpInfo (string state, string suburb, string postcode, string types = null, int? year = null)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling DemographicsApi->DemographicsGetByNamedSuburb");
            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new ApiException(400, "Missing required parameter 'suburb' when calling DemographicsApi->DemographicsGetByNamedSuburb");
            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new ApiException(400, "Missing required parameter 'postcode' when calling DemographicsApi->DemographicsGetByNamedSuburb");

            var localVarPath = "/v2/demographics/{state}/{suburb}/{postcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter
            if (suburb != null) localVarPathParams.Add("suburb", this.Configuration.ApiClient.ParameterToString(suburb)); // path parameter
            if (postcode != null) localVarPathParams.Add("postcode", this.Configuration.ApiClient.ParameterToString(postcode)); // path parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DemographicsGetByNamedSuburb", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DemographicsResultsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DemographicsResultsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DemographicsResultsModel)));
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>Task of DemographicsResultsModel</returns>
        public async System.Threading.Tasks.Task<DemographicsResultsModel> DemographicsGetByNamedSuburbAsync (string state, string suburb, string postcode, string types = null, int? year = null)
        {
             ApiResponse<DemographicsResultsModel> localVarResponse = await DemographicsGetByNamedSuburbAsyncWithHttpInfo(state, suburb, postcode, types, year);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>Task of ApiResponse (DemographicsResultsModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DemographicsResultsModel>> DemographicsGetByNamedSuburbAsyncWithHttpInfo (string state, string suburb, string postcode, string types = null, int? year = null)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling DemographicsApi->DemographicsGetByNamedSuburb");
            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new ApiException(400, "Missing required parameter 'suburb' when calling DemographicsApi->DemographicsGetByNamedSuburb");
            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new ApiException(400, "Missing required parameter 'postcode' when calling DemographicsApi->DemographicsGetByNamedSuburb");

            var localVarPath = "/v2/demographics/{state}/{suburb}/{postcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter
            if (suburb != null) localVarPathParams.Add("suburb", this.Configuration.ApiClient.ParameterToString(suburb)); // path parameter
            if (postcode != null) localVarPathParams.Add("postcode", this.Configuration.ApiClient.ParameterToString(postcode)); // path parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DemographicsGetByNamedSuburb", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DemographicsResultsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DemographicsResultsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DemographicsResultsModel)));
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>DemographicsResultsModel</returns>
        public DemographicsResultsModel DemographicsGetByNamedSuburbWithoutPostcode (string state, string suburb, string postcode, string types = null, int? year = null)
        {
             ApiResponse<DemographicsResultsModel> localVarResponse = DemographicsGetByNamedSuburbWithoutPostcodeWithHttpInfo(state, suburb, postcode, types, year);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>ApiResponse of DemographicsResultsModel</returns>
        public ApiResponse< DemographicsResultsModel > DemographicsGetByNamedSuburbWithoutPostcodeWithHttpInfo (string state, string suburb, string postcode, string types = null, int? year = null)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");
            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new ApiException(400, "Missing required parameter 'suburb' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");
            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new ApiException(400, "Missing required parameter 'postcode' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");

            var localVarPath = "/v2/demographics/{state}/{suburb}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter
            if (suburb != null) localVarPathParams.Add("suburb", this.Configuration.ApiClient.ParameterToString(suburb)); // path parameter
            if (postcode != null) localVarPathParams.Add("postcode", this.Configuration.ApiClient.ParameterToString(postcode)); // path parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DemographicsGetByNamedSuburbWithoutPostcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DemographicsResultsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DemographicsResultsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DemographicsResultsModel)));
        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>Task of DemographicsResultsModel</returns>
        public async System.Threading.Tasks.Task<DemographicsResultsModel> DemographicsGetByNamedSuburbWithoutPostcodeAsync (string state, string suburb, string postcode, string types = null, int? year = null)
        {
             ApiResponse<DemographicsResultsModel> localVarResponse = await DemographicsGetByNamedSuburbWithoutPostcodeAsyncWithHttpInfo(state, suburb, postcode, types, year);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for demographics in a given geographic level. &lt;br&gt;Where available, all available topics and years will be returned if not supplied.  &lt;br&gt;Note that not all suburbs will have data available for all years and topics.
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="types">Comma separated list of census topics to retrieve demographic data for. Possible values include:              &#x60;AgeGroupOfPopulation&#x60;, &#x60;CountryOfBirth&#x60;, &#x60;NatureOfOccupancy&#x60;,              &#x60;Occupation&#x60;, &#x60;GeographicalPopulation&#x60;, &#x60;DwellingStructure&#x60;,              &#x60;EducationAttendance&#x60;, &#x60;HousingLoanRepayment&#x60;, &#x60;MaritalStatus&#x60;,              &#x60;Religion&#x60;, &#x60;TransportToWork&#x60;, &#x60;FamilyComposition&#x60;,              &#x60;HouseholdIncome&#x60;, &#x60;Rent&#x60;, &#x60;LabourForceStatus&#x60; (optional)</param>
        /// <param name="year">Census Year of data to return (optional)</param>
        /// <returns>Task of ApiResponse (DemographicsResultsModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DemographicsResultsModel>> DemographicsGetByNamedSuburbWithoutPostcodeAsyncWithHttpInfo (string state, string suburb, string postcode, string types = null, int? year = null)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");
            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new ApiException(400, "Missing required parameter 'suburb' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");
            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new ApiException(400, "Missing required parameter 'postcode' when calling DemographicsApi->DemographicsGetByNamedSuburbWithoutPostcode");

            var localVarPath = "/v2/demographics/{state}/{suburb}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter
            if (suburb != null) localVarPathParams.Add("suburb", this.Configuration.ApiClient.ParameterToString(suburb)); // path parameter
            if (postcode != null) localVarPathParams.Add("postcode", this.Configuration.ApiClient.ParameterToString(postcode)); // path parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (year != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year", year)); // query parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DemographicsGetByNamedSuburbWithoutPostcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DemographicsResultsModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DemographicsResultsModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DemographicsResultsModel)));
        }

    }
}
