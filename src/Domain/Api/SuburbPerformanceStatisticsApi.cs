/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Domain.Client;
using Domain.Model;

namespace Domain.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISuburbPerformanceStatisticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search for sales statistics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>APMAPIModelsSuburbV2SuburbPerformanceModel</returns>
        APMAPIModelsSuburbV2SuburbPerformanceModel SuburbPerformanceGetByNamedSuburb (string state, string suburb, string postcode, SuburbPerformancePropertyCategory propertyCategory = null, int? bedrooms = null, SuburbPerformancePeriodSize periodSize = null, int? startingPeriodRelativeToCurrent = null, int? totalPeriods = null);

        /// <summary>
        /// Search for sales statistics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>ApiResponse of APMAPIModelsSuburbV2SuburbPerformanceModel</returns>
        ApiResponse<APMAPIModelsSuburbV2SuburbPerformanceModel> SuburbPerformanceGetByNamedSuburbWithHttpInfo (string state, string suburb, string postcode, SuburbPerformancePropertyCategory propertyCategory = null, int? bedrooms = null, SuburbPerformancePeriodSize periodSize = null, int? startingPeriodRelativeToCurrent = null, int? totalPeriods = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Search for sales statistics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>Task of APMAPIModelsSuburbV2SuburbPerformanceModel</returns>
        System.Threading.Tasks.Task<APMAPIModelsSuburbV2SuburbPerformanceModel> SuburbPerformanceGetByNamedSuburbAsync (string state, string suburb, string postcode, SuburbPerformancePropertyCategory propertyCategory = null, int? bedrooms = null, SuburbPerformancePeriodSize periodSize = null, int? startingPeriodRelativeToCurrent = null, int? totalPeriods = null);

        /// <summary>
        /// Search for sales statistics in a given geographic level.
        /// </summary>
        /// <remarks>
        /// - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </remarks>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>Task of ApiResponse (APMAPIModelsSuburbV2SuburbPerformanceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<APMAPIModelsSuburbV2SuburbPerformanceModel>> SuburbPerformanceGetByNamedSuburbAsyncWithHttpInfo (string state, string suburb, string postcode, SuburbPerformancePropertyCategory propertyCategory = null, int? bedrooms = null, SuburbPerformancePeriodSize periodSize = null, int? startingPeriodRelativeToCurrent = null, int? totalPeriods = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SuburbPerformanceStatisticsApi : ISuburbPerformanceStatisticsApi
    {
        private Domain.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SuburbPerformanceStatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SuburbPerformanceStatisticsApi(String basePath)
        {
            this.Configuration = new Domain.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Domain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SuburbPerformanceStatisticsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SuburbPerformanceStatisticsApi()
        {
            this.Configuration = Domain.Client.Configuration.Default;

            ExceptionFactory = Domain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SuburbPerformanceStatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SuburbPerformanceStatisticsApi(Domain.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Domain.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Domain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Domain.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Domain.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Search for sales statistics in a given geographic level. - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>APMAPIModelsSuburbV2SuburbPerformanceModel</returns>
        public APMAPIModelsSuburbV2SuburbPerformanceModel SuburbPerformanceGetByNamedSuburb (string state, string suburb, string postcode, SuburbPerformancePropertyCategory propertyCategory = null, int? bedrooms = null, SuburbPerformancePeriodSize periodSize = null, int? startingPeriodRelativeToCurrent = null, int? totalPeriods = null)
        {
             ApiResponse<APMAPIModelsSuburbV2SuburbPerformanceModel> localVarResponse = SuburbPerformanceGetByNamedSuburbWithHttpInfo(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for sales statistics in a given geographic level. - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>ApiResponse of APMAPIModelsSuburbV2SuburbPerformanceModel</returns>
        public ApiResponse< APMAPIModelsSuburbV2SuburbPerformanceModel > SuburbPerformanceGetByNamedSuburbWithHttpInfo (string state, string suburb, string postcode, SuburbPerformancePropertyCategory propertyCategory = null, int? bedrooms = null, SuburbPerformancePeriodSize periodSize = null, int? startingPeriodRelativeToCurrent = null, int? totalPeriods = null)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");
            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new ApiException(400, "Missing required parameter 'suburb' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");
            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new ApiException(400, "Missing required parameter 'postcode' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");

            var localVarPath = "/v2/suburbPerformanceStatistics/{state}/{suburb}/{postcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter
            if (suburb != null) localVarPathParams.Add("suburb", this.Configuration.ApiClient.ParameterToString(suburb)); // path parameter
            if (postcode != null) localVarPathParams.Add("postcode", this.Configuration.ApiClient.ParameterToString(postcode)); // path parameter
            if (propertyCategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "propertyCategory", propertyCategory)); // query parameter
            if (bedrooms != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bedrooms", bedrooms)); // query parameter
            if (periodSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "periodSize", periodSize)); // query parameter
            if (startingPeriodRelativeToCurrent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startingPeriodRelativeToCurrent", startingPeriodRelativeToCurrent)); // query parameter
            if (totalPeriods != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalPeriods", totalPeriods)); // query parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuburbPerformanceGetByNamedSuburb", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APMAPIModelsSuburbV2SuburbPerformanceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APMAPIModelsSuburbV2SuburbPerformanceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APMAPIModelsSuburbV2SuburbPerformanceModel)));
        }

        /// <summary>
        /// Search for sales statistics in a given geographic level. - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>Task of APMAPIModelsSuburbV2SuburbPerformanceModel</returns>
        public async System.Threading.Tasks.Task<APMAPIModelsSuburbV2SuburbPerformanceModel> SuburbPerformanceGetByNamedSuburbAsync (string state, string suburb, string postcode, SuburbPerformancePropertyCategory propertyCategory = null, int? bedrooms = null, SuburbPerformancePeriodSize periodSize = null, int? startingPeriodRelativeToCurrent = null, int? totalPeriods = null)
        {
             ApiResponse<APMAPIModelsSuburbV2SuburbPerformanceModel> localVarResponse = await SuburbPerformanceGetByNamedSuburbAsyncWithHttpInfo(state, suburb, postcode, propertyCategory, bedrooms, periodSize, startingPeriodRelativeToCurrent, totalPeriods);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for sales statistics in a given geographic level. - Standard Auction Clearance Rate formula is: &#x60;AuctionNumberSold / (AuctionNumberAuctioned + AuctionNumberWithdrawn)&#x60;  - The Rate is considered Not Statistic Reliable if: &#x60;AuctionNumberAuctioned + AuctionNumberWithdrawn &lt; 10&#x60;  - APM Standard Gross Rental Yield formula is: &#x60;(MedianRentListingPrice* 52) / MedianSoldPrice&#x60;  - The Yield is considered Not Available if: &#x60;MedianRentListingPrice is null or MedianSoldPrice is null&#x60;
        /// </summary>
        /// <exception cref="Domain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">The Australian state abbreviation</param>
        /// <param name="suburb">Suburb name to retrieve data for</param>
        /// <param name="postcode">Suburb Post Code, optional, but required for suburbs with official post codes.</param>
        /// <param name="propertyCategory">Category of sales results to show. Possible values: &#x60;House&#x60;, &#x60;Unit&#x60; (optional)</param>
        /// <param name="bedrooms">Number of bedrooms to use in the sales search (optional)</param>
        /// <param name="periodSize">Unit of the measurement period to use (optional)</param>
        /// <param name="startingPeriodRelativeToCurrent">When to start stats from. 1 &#x3D; current period, 2 &#x3D; previous period, etc. (optional, default to 1)</param>
        /// <param name="totalPeriods">Number of total periods to show statistics for. i.e. 4 Quarters would be 1 full year (optional, default to 4)</param>
        /// <returns>Task of ApiResponse (APMAPIModelsSuburbV2SuburbPerformanceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APMAPIModelsSuburbV2SuburbPerformanceModel>> SuburbPerformanceGetByNamedSuburbAsyncWithHttpInfo (string state, string suburb, string postcode, SuburbPerformancePropertyCategory propertyCategory = null, int? bedrooms = null, SuburbPerformancePeriodSize periodSize = null, int? startingPeriodRelativeToCurrent = null, int? totalPeriods = null)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");
            // verify the required parameter 'suburb' is set
            if (suburb == null)
                throw new ApiException(400, "Missing required parameter 'suburb' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");
            // verify the required parameter 'postcode' is set
            if (postcode == null)
                throw new ApiException(400, "Missing required parameter 'postcode' when calling SuburbPerformanceStatisticsApi->SuburbPerformanceGetByNamedSuburb");

            var localVarPath = "/v2/suburbPerformanceStatistics/{state}/{suburb}/{postcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter
            if (suburb != null) localVarPathParams.Add("suburb", this.Configuration.ApiClient.ParameterToString(suburb)); // path parameter
            if (postcode != null) localVarPathParams.Add("postcode", this.Configuration.ApiClient.ParameterToString(postcode)); // path parameter
            if (propertyCategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "propertyCategory", propertyCategory)); // query parameter
            if (bedrooms != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bedrooms", bedrooms)); // query parameter
            if (periodSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "periodSize", periodSize)); // query parameter
            if (startingPeriodRelativeToCurrent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startingPeriodRelativeToCurrent", startingPeriodRelativeToCurrent)); // query parameter
            if (totalPeriods != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "totalPeriods", totalPeriods)); // query parameter
            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuburbPerformanceGetByNamedSuburb", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APMAPIModelsSuburbV2SuburbPerformanceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APMAPIModelsSuburbV2SuburbPerformanceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APMAPIModelsSuburbV2SuburbPerformanceModel)));
        }

    }
}
