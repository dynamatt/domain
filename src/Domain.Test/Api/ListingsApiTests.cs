/* 
 * Domain Public API
 *
 * See https://developer.domain.com.au for more information
 *
 * OpenAPI spec version: v2
 * Contact: api@domain.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Domain.Client;
using Domain.Api;
using Domain.Model;

namespace Domain.Test
{
    /// <summary>
    ///  Class for testing ListingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ListingsApiTests
    {
        private ListingsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ListingsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ListingsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ListingsApi
            //Assert.IsInstanceOfType(typeof(ListingsApi), instance, "instance is a ListingsApi");
        }

        /// <summary>
        /// Test ListingsUpsertbusinessoffmarket
        /// </summary>
        [Test]
        public void ListingsUpsertbusinessoffmarketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ListingAdminV2BusinessOffMarketListing body = null;
            //var response = instance.ListingsUpsertbusinessoffmarket(body);
            //Assert.IsInstanceOf<ListingAdminV2ListingResponse> (response, "response is ListingAdminV2ListingResponse");
        }
        /// <summary>
        /// Test ListingsUpsertcommerciallisting
        /// </summary>
        [Test]
        public void ListingsUpsertcommerciallistingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ListingAdminV2CommercialListingV2 body = null;
            //var response = instance.ListingsUpsertcommerciallisting(body);
            //Assert.IsInstanceOf<ListingAdminV2ListingResponse> (response, "response is ListingAdminV2ListingResponse");
        }
        /// <summary>
        /// Test ListingsUpsertcommercialoffmarket
        /// </summary>
        [Test]
        public void ListingsUpsertcommercialoffmarketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ListingAdminV2CommercialOffMarketListing body = null;
            //var response = instance.ListingsUpsertcommercialoffmarket(body);
            //Assert.IsInstanceOf<ListingAdminV2ListingResponse> (response, "response is ListingAdminV2ListingResponse");
        }
        /// <summary>
        /// Test ListingsUpsertresidentialoffmarket
        /// </summary>
        [Test]
        public void ListingsUpsertresidentialoffmarketTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ListingAdminV2ResidentialOffMarketListing body = null;
            //var response = instance.ListingsUpsertresidentialoffmarket(body);
            //Assert.IsInstanceOf<ListingAdminV2ListingResponse> (response, "response is ListingAdminV2ListingResponse");
        }
        /// <summary>
        /// Test PreMarketGet
        /// </summary>
        [Test]
        public void PreMarketGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.PreMarketGet(id);
            //Assert.IsInstanceOf<PreMarketV1ListingResponse> (response, "response is PreMarketV1ListingResponse");
        }
        /// <summary>
        /// Test PreMarketPatch
        /// </summary>
        [Test]
        public void PreMarketPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PreMarketV1ListingRequestJsonPatchDocument body = null;
            //var response = instance.PreMarketPatch(id, body);
            //Assert.IsInstanceOf<PreMarketV1ListingRequest> (response, "response is PreMarketV1ListingRequest");
        }
        /// <summary>
        /// Test PreMarketPost
        /// </summary>
        [Test]
        public void PreMarketPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PreMarketV1ListingRequest body = null;
            //var response = instance.PreMarketPost(body);
            //Assert.IsInstanceOf<PreMarketV1CreateOrUpdateListingResponse> (response, "response is PreMarketV1CreateOrUpdateListingResponse");
        }
    }

}
